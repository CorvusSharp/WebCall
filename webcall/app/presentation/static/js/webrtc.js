// webrtc.js ‚Äî –º—É–ª—å—Ç–∏–ø–∏—Ä WebRTC —Å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–π –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–æ–π –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
import { sendSignal } from "./signal.js";
import { getIceServers } from "./api.js";

/**
 * –û–ø—Ü–∏–∏:
 * - localVideo: HTMLVideoElement|null
 * - outputDeviceId?: string|null
 * - onLog?: (msg)=>void
 * - onPeerState?: (peerId, key, value)=>void
 */
export class WebRTCManager {
  constructor(opts){
    this.localVideo = opts.localVideo || null;
    this.outputDeviceId = opts.outputDeviceId || null;
    this.onLog = opts.onLog || (()=>{});
    this.onPeerState = opts.onPeerState || (()=>{});

    this.ws = null;
    this.userId = null;
    this.localStream = null;
    this.preferred = { micId: undefined, camId: undefined };
    this.iceConfig = null;

    // peerId -> { pc, stream, candidates:[], remoteSet, handlers,
    //             makingOffer, ignoreOffer, polite, iceFailTimer }
    this.peers = new Map();
  }

  _log(m){ try{ this.onLog(m); }catch{} }
  getOutputDeviceId(){ return this.outputDeviceId; }
  setPreferredDevices({ mic, cam, spk }){
    if (mic) this.preferred.micId = mic;
    if (cam) this.preferred.camId = cam;
    if (spk) this.outputDeviceId = spk;
    for (const [,st] of this.peers){
      try { st.handlers?.onSinkChange?.(this.outputDeviceId); } catch {}
    }
  }

  async _getLocalMedia() {
    const baseAudio = {
      echoCancellation: true, noiseSuppression: true, autoGainControl: true,
      deviceId: this.preferred.micId ? { exact: this.preferred.micId } : undefined,
    };
    try {
      this._log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω...');
      const s = await navigator.mediaDevices.getUserMedia({ audio: baseAudio, video: false });
      this._log('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω–æ');
      return s;
    } catch (e) {
      this._log(`getUserMedia failed: ${e?.name || e}`);
      // Fallback: –ø—Ä–æ–±—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±–µ–∑ deviceId
      if (e?.name === 'OverconstrainedError' || e?.name === 'NotFoundError') {
        try {
          this._log('–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∞—É–¥–∏–æ –±–µ–∑ deviceId‚Ä¶');
          const s2 = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });
          this._log('–ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
          return s2;
        } catch (e2) {
          this._log(`–ü–æ–≤—Ç–æ—Ä–Ω—ã–π gUM –Ω–µ —É–¥–∞–ª—Å—è: ${e2?.name || e2}`);
        }
      }
      return null;
    }
  }


  async init(ws, userId, { micId, camId } = {}) {
    this.ws = ws;
    this.userId = userId;
    if (micId) this.preferred.micId = micId;
    if (camId) this.preferred.camId = camId;

    if (!this.iceConfig) {
      try {
        this.iceConfig = await getIceServers();
      } catch (e) {
        this._log(`ICE config error: ${e}`);
        this.iceConfig = { iceServers: [{ urls: "stun:stun.l.google.com:19302" }] };
      }
    }

    if (this.localStream) return;

    const stream = await this._getLocalMedia();
    this.localStream = stream;
    if (stream && this.localVideo) {
      this.localVideo.srcObject = stream;
    }
    this._log(`WebRTC –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ê—É–¥–∏–æ: ${stream && stream.getAudioTracks().length ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);

    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø—Ä–æ–±—Ä–æ—Å–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ-—Ç—Ä–µ–∫ –≤–æ –≤—Å–µ—Ö —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
    if (this.localStream) { await this.updateAllPeerTracks(); }
  }

  _isPolite(myId, peerId){
    // –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä ‚Äî —É –∫–æ–≥–æ id —Å—Ç—Ä–æ–∫–æ–π –º–µ–Ω—å—à–µ; ¬´–≤–µ–∂–ª–∏–≤—ã–π¬ª —Ç–æ—Ç, —É –∫–æ–≥–æ –±–æ–ª—å—à–µ
    return String(myId) > String(peerId);
  }


async _ensurePeer(peerId) {
  if (this.peers.has(peerId)) return this.peers.get(peerId);

  const pc = new RTCPeerConnection({
    ...this.iceConfig,
    bundlePolicy: "max-bundle",
    rtcpMuxPolicy: "require",
  });

  const state = {
    pc,
    stream: new MediaStream(),
    candidates: [],
    remoteSet: false,
    handlers: null,
    makingOffer: false,
    ignoreOffer: false,
    polite: this._isPolite(this.userId, peerId),
    iceFailTimer: null,
    // ‚ö†Ô∏è –ë–æ–ª—å—à–µ –ù–ï —Å–æ–∑–¥–∞—ë–º —Ç—É—Ç —Å–≤–æ–π audio transceiver. –î–∞–¥–∏–º –±—Ä–∞—É–∑–µ—Ä—É —Å–æ–∑–¥–∞—Ç—å
    // –µ–≥–æ –ø—Ä–∏ SRD(offer), –∞ –ø–æ—Ç–æ–º "–∞–ø–≥—Ä–µ–π–¥–∏–º" –∏–º–µ–Ω–Ω–æ –µ–≥–æ –≤ handleSignal().
    audioTransceiver: null,
  };

  pc.addEventListener("icecandidate", (e) => {
    if (e.candidate) {
      sendSignal(this.ws, "ice-candidate", { candidate: e.candidate }, this.userId, peerId);
      this._log(`üßä Sent ICE candidate to ${peerId.slice(0,8)}: ${e.candidate.candidate}`);
    }
  });

  pc.addEventListener("track", (e) => {
    this._log(`–ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫ –æ—Ç ${peerId.slice(0,8)}: ${e.track.kind} (enabled: ${e.track.enabled})`);
    if (e.track && !state.stream.getTracks().some(t => t.id === e.track.id)) {
      state.stream.addTrack(e.track);
    }
    e.track.addEventListener('mute', () => this._log(`(remote:${peerId.slice(0,8)}) ${e.track.kind} muted`));
    e.track.addEventListener('unmute', () => this._log(`(remote:${peerId.slice(0,8)}) ${e.track.kind} unmuted`));
    e.track.addEventListener('ended', () => this._log(`(remote:${peerId.slice(0,8)}) ${e.track.kind} ended`));

    if (state.handlers?.onTrack) {
      try { state.handlers.onTrack(state.stream); } catch {}
    }
    if (e.track?.kind === 'audio') this._setupPeerLevel(peerId, state);
  });

  pc.addEventListener("negotiationneeded", async () => {
    if (state.makingOffer) return;
    if (!state.polite) {
      try {
        state.makingOffer = true;
        const offer = await pc.createOffer();
        await pc.setLocalDescription(offer);
        sendSignal(this.ws, 'offer', { sdp: offer.sdp }, this.userId, peerId);
        this._log(`üì§ Sent offer ‚Üí ${peerId.slice(0,8)} (negotiationneeded)\n${offer.sdp}`);
      } catch (e) {
        this._log(`negotiationneeded(${peerId.slice(0,8)}): ${e?.name || e}`);
      } finally { state.makingOffer = false; }
    }
  });

  pc.addEventListener("connectionstatechange", () => {
    const s = pc.connectionState;
    this.onPeerState(peerId, 'net', s);
    this._log(`PC(${peerId.slice(0,8)}) = ${s}`);
    if (s === 'failed') {
      this._iceRestart(peerId).catch(() => {});
    } else if (s === 'disconnected') {
      clearTimeout(state.iceFailTimer);
      state.iceFailTimer = setTimeout(() => {
        if (pc.connectionState === 'disconnected') this._iceRestart(peerId).catch(() => {});
      }, 2000);
    } else if (s === 'connected' || s === 'completed') {
      clearTimeout(state.iceFailTimer); state.iceFailTimer = null;
    }
  });

  pc.addEventListener("iceconnectionstatechange", () => {
    this._log(`ICE(${peerId.slice(0,8)}) = ${pc.iceConnectionState}`);
  });

  this.peers.set(peerId, state);
  return state;
}


  async _iceRestart(peerId){
    const st = this.peers.get(peerId);
    if (!st) return;
    this._log(`ICE-restart ‚Üí ${peerId.slice(0,8)}`);
    try{
      const offer = await st.pc.createOffer({ iceRestart: true });
      await st.pc.setLocalDescription(offer);
      sendSignal(this.ws, 'offer', { sdp: offer.sdp }, this.userId, peerId);
    }catch(e){ this._log(`ICE-restart(${peerId.slice(0,8)}): ${e?.name||e}`); }
  }

  bindPeerMedia(peerId, handlers){
    const st = this.peers.get(peerId);
    if (!st) { return; }
    // –û–±—ä–µ–¥–∏–Ω–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–Ω–∏—è
    st.handlers = Object.assign({}, st.handlers || {}, handlers || {});
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç—Ä–µ–∫–∏ ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ–±—Ä–æ—Å–∏–º –ø–æ—Ç–æ–∫
    if (st.stream && (st.stream.getAudioTracks().length || st.stream.getVideoTracks().length)){
      try { st.handlers?.onTrack?.(st.stream); } catch {}
      // –ò —Å—Ä–∞–∑—É –ø–æ–¥–Ω–∏–º–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è –¥–ª—è –∞—É–¥–∏–æ
      try { if (st.stream.getAudioTracks().length) this._setupPeerLevel(peerId, st); } catch {}
    }
  }
  getPeer(peerId){ return this.peers.get(peerId); }



async handleSignal(msg, mediaBinder) {
  if (msg?.fromUserId && this.userId && msg.fromUserId === this.userId) return;
  if (msg?.targetUserId && this.userId && msg.targetUserId !== this.userId) return;

  const peerId = msg.fromUserId;
  const peer = await this._ensurePeer(peerId);
  const pc = peer.pc;

  if (mediaBinder && !peer.handlers) {
    mediaBinder(peerId, { onTrack: () => {}, onLevel: () => {}, onSinkChange: () => {} });
  }

  if (msg.signalType === 'offer') {
    await this.init(this.ws, this.userId);
    const desc = { type: 'offer', sdp: msg.sdp };
    this._log(`üì• Received OFFER from ${peerId.slice(0,8)}:\n${msg.sdp}`);

    const offerCollision = peer.makingOffer || pc.signalingState !== "stable";
    peer.ignoreOffer = !peer.polite && offerCollision;
    if (peer.ignoreOffer) { this._log(`‚è≠Ô∏è Ignore offer from ${peerId.slice(0,8)} (impolite collision)`); return; }

    try {
      if (offerCollision) await pc.setLocalDescription({ type: 'rollback' });
      await pc.setRemoteDescription(desc);
      peer.remoteSet = true;
      await this._flushQueuedCandidates(peerId);

      // === –ö–õ–Æ–ß–ï–í–û–ô –ë–õ–û–ö: –∞–ø–≥—Ä–µ–π–¥ recvonly ‚Üí sendrecv –ü–ï–†–ï–î createAnswer ===
      try {
        const at = this.localStream?.getAudioTracks?.()[0];

        // 1) –Ω–∞–π–¥—ë–º –¢–†–ï–ë–£–ï–ú–´–ô –∞—É–¥–∏–æ-—Ç—Ä–∞–Ω—Å—Å–∏–≤–µ—Ä (—Ç–æ—Ç, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä —Å–æ–∑–¥–∞–ª –ø–æ–¥ m=audio –∏–∑ –æ—Ñ–µ—Ä–∞)
        const tx = pc.getTransceivers().find(t =>
          t.receiver?.track?.kind === 'audio' || t.mid === '0' || t.sender?.track?.kind === 'audio'
        );

        if (tx) {
          // direction –∑–∞–¥–∞—ë—Ç, –ß–¢–û –º—ã –±—É–¥–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å/–æ—Ç–≤–µ—á–∞—Ç—å (—Å–º. MDN)
          tx.direction = 'sendrecv'; // –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –¥–æ createAnswer
          peer.audioTransceiver = tx;

          // 2) –í—Ç—ã–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏–º–µ–Ω–Ω–æ –≤ –≠–¢–û–¢ sender
          if (at) {
            await tx.sender.replaceTrack(at);
            this._log(`üîß (offer) ensured local audio track on mapped transceiver for ${peerId.slice(0,8)}`);
          } else {
            // –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –µ—Å–ª–∏ —Å—Ç—Ä–∏–º–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å
            const s2 = await this._getLocalMedia();
            if (s2) {
              this.localStream = s2;
              const t2 = s2.getAudioTracks()[0];
              if (t2) { await tx.sender.replaceTrack(t2); }
            }
          }
        } else if (at) {
          // –ï—Å–ª–∏ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π transceiver ‚Äî –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å
          pc.addTrack(at, this.localStream); // addTrack —Ä–µ—é–∑–∞–µ—Ç "recvonly" transceiver (unified-plan)
          this._log(`ü™Ñ addTrack fallback used for ${peerId.slice(0,8)}`);
        }
      } catch (e) {
        this._log(`ensure sendrecv before answer: ${e?.name || e}`);
      }
      // === –∫–æ–Ω–µ—Ü –∫–ª—é—á–µ–≤–æ–≥–æ –±–ª–æ–∫–∞ ===

      const answer = await pc.createAnswer(); // —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç sendrecv –∏ msid
      await pc.setLocalDescription(answer);
      sendSignal(this.ws, 'answer', { sdp: answer.sdp }, this.userId, peerId);
      this._log(`üì§ Answered offer from ${peerId.slice(0,8)}\n${answer.sdp}`);

      if (this.localStream) { await this.updateAllPeerTracks(); }
    } catch (e) {
      this._log(`SRD(offer)[${peerId.slice(0,8)}]: ${e?.name || e}`);
    }

  } else if (msg.signalType === 'answer') {
    if (pc.signalingState !== 'have-local-offer') {
      this._log(`Ignore answer in ${pc.signalingState}`); return;
    }
    try {
      this._log(`üì• Received ANSWER from ${peerId.slice(0,8)}:\n${msg.sdp}`);
      await pc.setRemoteDescription({ type: 'answer', sdp: msg.sdp });
      peer.remoteSet = true;
      await this._flushQueuedCandidates(peerId);
      if (this.localStream) { await this.updateAllPeerTracks(); }
      this._log(`Processed answer from ${peerId.slice(0,8)}`);
    } catch (e) {
      this._log(`SRD(answer)[${peerId.slice(0,8)}]: ${e?.name || e}`);
    }

  } else if (msg.signalType === 'ice-candidate' || msg.signalType === 'ice_candidate') {
    this._log(`üßä Received ICE candidate from ${peerId.slice(0,8)}: ${msg.candidate ? msg.candidate.candidate : '(null)'}`);
    if (!peer.remoteSet) peer.candidates.push(msg.candidate);
    else {
      try { await pc.addIceCandidate(msg.candidate); }
      catch (e) { this._log(`addIce[${peerId.slice(0,8)}]: ${e?.name || e}`); }
    }
  }
}




  async _flushQueuedCandidates(peerId){
    const peer = this.peers.get(peerId);
    if (!peer?.pc) return;
    while (peer.candidates.length){
      const c = peer.candidates.shift();
      try { await peer.pc.addIceCandidate(c); }
      catch(e){ this._log(`flush ICE[${peerId.slice(0,8)}]: ${e?.name||e}`); }
    }
  }

  async startOffer(peerId){
    await this.init(this.ws, this.userId);
    const st = await this._ensurePeer(peerId);
    if (st.makingOffer) return;
    if (st.pc.signalingState !== 'stable'){
      this._log(`Skip startOffer(${peerId.slice(0,8)}) in ${st.pc.signalingState}`); return;
    }
    if (st.polite) { this._log(`Not initiator for ${peerId.slice(0,8)}`); return; }

    try{
      st.makingOffer = true;
      const offer = await st.pc.createOffer();
      await st.pc.setLocalDescription(offer);
      sendSignal(this.ws, 'offer', { sdp: offer.sdp }, this.userId, peerId);
      this._log(`üì§ Sent offer ‚Üí ${peerId.slice(0,8)} (startOffer)\n${offer.sdp}`);
    }catch(e){ this._log(`startOffer(${peerId.slice(0,8)}): ${e?.name||e}`); }
    finally{ st.makingOffer = false; }
  }

  async toggleMic(){
    if (this.localStream) {
      const tr = this.localStream.getAudioTracks()[0];
      if (!tr) { this._log('–ù–µ—Ç –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è'); return false; }
      tr.enabled = !tr.enabled;
      this._log(`–ú–∏–∫—Ä–æ—Ñ–æ–Ω ${tr.enabled ? '–≤–∫–ª—é—á—ë–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
      return tr.enabled;
    } else {
      this._log('–ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞, –ø—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å...');
      const stream = await this._getLocalMedia();
      if (stream) {
        this.localStream = stream;
        if (this.localVideo) this.localVideo.srcObject = stream;
        await this.updateAllPeerTracks(); // Add this function
        this._log('–ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á—ë–Ω (–ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω)');
        return true;
      } else {
        this._log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
        return false;
      }
    }
  }
  toggleCam(){
    if (!this.localStream) { this._log('–ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –∫–∞–º–µ—Ä—ã'); return false; }
    let tr = this.localStream.getVideoTracks()[0];
    if (!tr){
      navigator.mediaDevices.getUserMedia({
        video: this.preferred.camId ? { deviceId: { exact: this.preferred.camId } } : true,
        audio: false
      }).then(s=>{
        const [vt] = s.getVideoTracks();
        if (!vt) return;
        this.localStream.addTrack(vt);
        if (this.localVideo) this.localVideo.srcObject = this.localStream;
        this._log('–ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞');
      }).catch(e=> this._log(`Camera init: ${e?.name||e}`));
      return true;
    }
    tr.enabled = !tr.enabled;
    this._log(`–ö–∞–º–µ—Ä–∞ ${tr.enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
    return tr.enabled;
  }

  async close(){
      try{ this.ws?.close(); }catch{}
      for (const [, st] of this.peers){
          try{ 
              // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ
              st.pc.onicecandidate = null;
              st.pc.close();
          }catch{}
          if (st.level?.raf) cancelAnimationFrame(st.level.raf);
          clearTimeout(st.iceFailTimer);
      }
      this.peers.clear();
      if (this.localStream) this.localStream.getTracks().forEach(t=>t.stop());
      this.localStream = null;
      this._log('WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã');
  }

  async updateAllPeerTracks() {
      if (!this.localStream) return;
      const audioTrack = this.localStream.getAudioTracks()[0];
      if (!audioTrack) return;

      this._log('–û–±–Ω–æ–≤–ª—è—é —Ç—Ä–µ–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–∏—Ä–æ–≤...');
    for (const [peerId, peer] of this.peers) {
      const sender = (peer.audioTransceiver?.sender) || peer.pc.getSenders().find(s => s.track?.kind === 'audio');
      if (!sender) continue;
      try {
        await sender.replaceTrack(audioTrack);
        this._log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∞—É–¥–∏–æ-—Ç—Ä–µ–∫ –¥–ª—è ${peerId.slice(0,8)}`);
      } catch (e) {
        this._log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –¥–ª—è ${peerId.slice(0,8)}: ${e}`);
      }
    }
  }

  _setupPeerLevel(peerId, state){
    try{
      if (!window.AudioContext || !state.stream?.getAudioTracks().length) return;
      if (state.level?.raf) cancelAnimationFrame(state.level.raf);
      state.level = state.level || {};
      state.level.ctx = new AudioContext();
      const src = state.level.ctx.createMediaStreamSource(state.stream);
      state.level.analyser = state.level.ctx.createAnalyser();
      state.level.analyser.fftSize = 256;
      src.connect(state.level.analyser);
      const data = new Uint8Array(state.level.analyser.frequencyBinCount);
      const loop = ()=>{
        state.level.analyser.getByteTimeDomainData(data);
        let sum=0; for (let i=0;i<data.length;i++){ const v=(data[i]-128)/128; sum+=v*v; }
        const rms = Math.sqrt(sum/data.length);
        if (state.handlers?.onLevel) state.handlers.onLevel(rms);
        state.level.raf = requestAnimationFrame(loop);
      };
      state.level.raf = requestAnimationFrame(loop);
      this._log(`–ù–∞—Å—Ç—Ä–æ–µ–Ω –∞—É–¥–∏–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è ${peerId.slice(0,8)}`);
    } catch(e) {
      this._log(`level[${peerId.slice(0,8)}]: ${e?.name||e}`);
    }
  }

  // –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
  async diagnoseAudio(){
      this._log('=== üîä –ê–£–î–ò–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===');
      if (this.localStream){
          const ats = this.localStream.getAudioTracks();
          this._log(`üì± –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫: ${ats.length} –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤`);
          ats.forEach((t,i)=> this._log(`üé§ –¢—Ä–µ–∫ ${i}: enabled=${t.enabled}, readyState=${t.readyState}, muted=${t.muted}`));
      } else {
          this._log('‚ùå –ù–ï–¢ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞!');
      }
      this._log(`üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${this.peers.size}`);
      
      for (const [peerId, st] of this.peers){
          const pc = st.pc;
          this._log(`--- Peer ${peerId.slice(0,8)} ---`);
          this._log(`üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${pc.connectionState}`);
          this._log(`üßä ICE: ${pc.iceConnectionState}`);
          this._log(`üì° Signaling: ${pc.signalingState}`);
          
          // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
          try{
              const stats = await pc.getStats();
              let hasActiveConnection = false;
              
              stats.forEach(r=>{
                  if (r.type === 'transport' && r.selectedCandidatePairId) {
                      const candidatePair = stats.get(r.selectedCandidatePairId);
                      if (candidatePair && candidatePair.state === 'succeeded') {
                          hasActiveConnection = true;
                          this._log(`üåê –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${candidatePair.localCandidateId} ‚Üî ${candidatePair.remoteCandidateId}`);
                      }
                  }
                  if (r.type === 'inbound-rtp' && r.kind === 'audio') {
                      this._log(`üì• –í—Ö–æ–¥—è—â–∏–π –∞—É–¥–∏–æ: ${r.bytesReceived} bytes, ${r.packetsReceived} packets`);
                  }
                  if (r.type === 'outbound-rtp' && r.kind === 'audio') {
                      this._log(`üì§ –ò—Å—Ö–æ–¥—è—â–∏–π –∞—É–¥–∏–æ: ${r.bytesSent} bytes, ${r.packetsSent} packets`);
                  }
              });
              
              this._log(`‚úÖ –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${hasActiveConnection ? '–î–∞' : '–ù–µ—Ç'}`);
              
          } catch(e) {
              this._log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e}`);
          }
      }
      this._log('=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
  }
}
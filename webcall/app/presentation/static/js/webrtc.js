// webrtc.js ‚Äî —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –º—É–ª—å—Ç–∏–ø–∏—Ä WebRTC —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞—É–¥–∏–æ
import { sendSignal } from "./signal.js";
import { getIceServers } from "./api.js";

/**
 * –û–ø—Ü–∏–∏:
 * - localVideo: HTMLVideoElement|null
 * - outputDeviceId?: string|null
 * - onLog?: (msg)=>void
 * - onPeerState?: (peerId, key, value)=>void
 */
export class WebRTCManager {
  constructor(opts){
    this.localVideo = opts.localVideo || null;
    this.outputDeviceId = opts.outputDeviceId || null;
    this.onLog = opts.onLog || (()=>{});
    this.onPeerState = opts.onPeerState || (()=>{});

    this.ws = null;
    this.userId = null;
    this.localStream = null;
    this.preferred = { micId: undefined, camId: undefined };
    this.iceConfig = null;

    // peerId -> { pc, stream, candidates:[], remoteSet, handlers, level:{ctx,analyser,raf},
    //             isInitiator, negotiationInProgress, iceFailTimer }
    this.peers = new Map();
  }

  _log(m){ try{ this.onLog(m); }catch{} }
  getOutputDeviceId(){ return this.outputDeviceId; }
  setPreferredDevices({ mic, cam, spk }){
    if (mic) this.preferred.micId = mic;
    if (cam) this.preferred.camId = cam;
    if (spk) this.outputDeviceId = spk;
  }

  async _getLocalMedia(){
    const baseAudio = {
      echoCancellation: true, 
      noiseSuppression: true, 
      autoGainControl: true,
      deviceId: this.preferred.micId ? { exact: this.preferred.micId } : undefined,
    };
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ (–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      return await navigator.mediaDevices.getUserMedia({ audio: baseAudio, video: false });
    } catch(e) {
      this._log(`getUserMedia audio failed: ${e?.name||e}`);
      // –ü—Ä–æ–±—É–µ–º –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      try {
        return await navigator.mediaDevices.getUserMedia({ 
          audio: { echoCancellation: true, noiseSuppression: true }, 
          video: false 
        });
      } catch(e2) {
        this._log(`Fallback getUserMedia failed: ${e2?.name||e2}`);
        return null;
      }
    }
  }

  async init(ws, userId, { micId, camId } = {}){
    this.ws = ws;
    this.userId = userId;
    if (micId) this.preferred.micId = micId;
    if (camId) this.preferred.camId = camId;

    if (!this.iceConfig) {
      try { 
        this.iceConfig = await getIceServers(); 
      } catch { 
        this.iceConfig = { 
          iceServers: [
            { urls: "stun:stun.l.google.com:19302" },
            { urls: "stun:stun1.l.google.com:19302" }
          ] 
        }; 
      }
    }

    // –í–°–ï–ì–î–ê –ø–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (!this.localStream) {
      const stream = await this._getLocalMedia();
      this.localStream = stream;
      if (stream && this.localVideo) {
        this.localVideo.srcObject = stream;
      }
    }

    this._log(`WebRTC –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ê—É–¥–∏–æ: ${this.localStream ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
  }

  _isInitiator(myId, peerId){
    // –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä - —É –∫–æ–≥–æ ID –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –º–µ–Ω—å—à–µ
    return String(myId) < String(peerId);
  }

  async _ensurePeer(peerId){
    if (this.peers.has(peerId)) return this.peers.get(peerId);

    const pc = new RTCPeerConnection({ 
      ...this.iceConfig, 
      bundlePolicy: "max-bundle", 
      rtcpMuxPolicy: "require" 
    });
    
    const state = {
      pc,
      stream: new MediaStream(),
      candidates: [],
      remoteSet: false,
      handlers: null,
      level: { ctx: null, analyser: null, raf: 0 },
      isInitiator: this._isInitiator(this.userId, peerId),
      negotiationInProgress: false,
      iceFailTimer: null,
    };

    // –ü–†–û–°–¢–û–ï –ò –ü–†–Ø–ú–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤
    if (this.localStream) {
      // –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï —Ç—Ä–µ–∫–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
      this.localStream.getTracks().forEach(track => {
        try {
          pc.addTrack(track, this.localStream);
          this._log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω ${track.kind} —Ç—Ä–µ–∫ –¥–ª—è ${peerId.slice(0,8)}`);
        } catch(e) {
          this._log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${track.kind} —Ç—Ä–µ–∫–∞ –¥–ª—è ${peerId}: ${e}`);
        }
      });
    } else {
      this._log(`üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ peer ${peerId.slice(0,8)}`);
    }

    pc.addEventListener("icecandidate", (e) => {
      if (e.candidate) {
        sendSignal(this.ws, "ice-candidate", { candidate: e.candidate }, this.userId, peerId);
      }
    });

    pc.addEventListener("track", (e) => {
      this._log(`–ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫ –æ—Ç ${peerId.slice(0,8)}: ${e.track.kind} (enabled: ${e.track.enabled})`);
      
      if (e.track && !state.stream.getTracks().some(t => t.id === e.track.id)) {
        state.stream.addTrack(e.track);
        this._log(`–¢—Ä–µ–∫ ${e.track.kind} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ—Ç–æ–∫ ${peerId.slice(0,8)}`);
      }
      
      // –í—ã–∑—ã–≤–∞–µ–º onTrack —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞
      if (state.handlers?.onTrack) {
        state.handlers.onTrack(state.stream);
      }
      
      if (e.track?.kind === 'audio') {
        this._setupPeerLevel(peerId, state);
        this._log(`–ù–∞—Å—Ç—Ä–æ–µ–Ω –∞—É–¥–∏–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è ${peerId.slice(0,8)}`);
      }
    });

    // –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ renegotiation - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä
    pc.addEventListener("negotiationneeded", async () => {
      if (!state.isInitiator || state.negotiationInProgress) return;
      
      try {
        state.negotiationInProgress = true;
        await this._createAndSendOffer(peerId, state);
      } catch(e) {
        this._log(`negotiationneeded error for ${peerId}: ${e}`);
      } finally {
        state.negotiationInProgress = false;
      }
    });

    // ICE connection monitoring
    pc.addEventListener("connectionstatechange", () => {
      const s = pc.connectionState;
      this.onPeerState(peerId, 'net', s);
      this._log(`PC(${peerId}) = ${s}`);
      
      if (s === 'failed') {
        this._handleIceFailure(peerId, state);
      } else if (s === 'disconnected') {
        clearTimeout(state.iceFailTimer);
        state.iceFailTimer = setTimeout(() => {
          if (pc.connectionState === 'disconnected') {
            this._handleIceFailure(peerId, state);
          }
        }, 3000);
      } else if (s === 'connected' || s === 'completed') {
        clearTimeout(state.iceFailTimer);
        state.iceFailTimer = null;
      }
    });

    pc.addEventListener("iceconnectionstatechange", () => {
      this._log(`ICE(${peerId}) = ${pc.iceConnectionState}`);
    });

    this.peers.set(peerId, state);
    return state;
  }

  async _createAndSendOffer(peerId, state) {
    try {
      const offer = await state.pc.createOffer({
        offerToReceiveAudio: true,
        offerToReceiveVideo: true,
        voiceActivityDetection: false  // –û—Ç–∫–ª—é—á–∞–µ–º VAD –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      });
      await state.pc.setLocalDescription(offer);
      sendSignal(this.ws, 'offer', { sdp: offer.sdp }, this.userId, peerId);
      this._log(`üì§ Sent offer to ${peerId.slice(0,8)}`);
    } catch(e) {
      this._log(`‚ùå Failed to create/send offer to ${peerId.slice(0,8)}: ${e}`);
    }
  }

  async _handleIceFailure(peerId, state) {
    this._log(`ICE failure for ${peerId}, attempting restart`);
    if (!state.isInitiator) return;
    
    try {
      const offer = await state.pc.createOffer({ iceRestart: true });
      await state.pc.setLocalDescription(offer);
      sendSignal(this.ws, 'offer', { sdp: offer.sdp }, this.userId, peerId);
    } catch(e) {
      this._log(`ICE restart failed for ${peerId}: ${e}`);
    }
  }

  // –ø—É–±–ª–∏—á–Ω—ã–µ —Ö—É–∫–∏ UI
  bindPeerMedia(peerId, handlers){ 
    const st = this.peers.get(peerId); 
    if (st) st.handlers = handlers; 
  }
  
  getPeer(peerId){ 
    return this.peers.get(peerId); 
  }

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É–¥–∏–æ
  diagnoseAudio() {
    this._log('=== üîä –ê–£–î–ò–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===');
    
    // –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
    if (this.localStream) {
      const audioTracks = this.localStream.getAudioTracks();
      this._log(`üì± –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫: ${audioTracks.length} –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤`);
      audioTracks.forEach((track, i) => {
        this._log(`  üé§ –¢—Ä–µ–∫ ${i}: enabled=${track.enabled}, readyState=${track.readyState}, muted=${track.muted}`);
      });
    } else {
      this._log('‚ùå –ù–ï–¢ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞!');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    try {
      const testCtx = new AudioContext();
      this._log(`üéß AudioContext state: ${testCtx.state}`);
      testCtx.close();
    } catch(e) {
      this._log(`‚ùå AudioContext –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${e}`);
    }
    
    // Peer connections
    this._log(`üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${this.peers.size}`);
    for (const [peerId, state] of this.peers) {
      this._log(`--- Peer ${peerId.slice(0,8)} ---`);
      this._log(`  üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${state.pc.connectionState}`);
      this._log(`  üßä ICE: ${state.pc.iceConnectionState}`);
      this._log(`  üì° Signaling: ${state.pc.signalingState}`);
      
      // –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–µ–∫–∏
      const senders = state.pc.getSenders();
      this._log(`  üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–æ–≤: ${senders.length}`);
      senders.forEach((sender, i) => {
        if (sender.track) {
          this._log(`    Sender ${i}: ${sender.track.kind}, enabled=${sender.track.enabled}, readyState=${sender.track.readyState}`);
        } else {
          this._log(`    Sender ${i}: ‚ùå –ù–ï–¢ –¢–†–ï–ö–ê`);
        }
      });
      
      // –í—Ö–æ–¥—è—â–∏–µ —Ç—Ä–µ–∫–∏
      const receivers = state.pc.getReceivers();
      this._log(`  üì• –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–æ–≤: ${receivers.length}`);
      receivers.forEach((receiver, i) => {
        if (receiver.track) {
          this._log(`    Receiver ${i}: ${receiver.track.kind}, enabled=${receiver.track.enabled}, readyState=${receiver.track.readyState}`);
        } else {
          this._log(`    Receiver ${i}: ‚ùå –ù–ï–¢ –¢–†–ï–ö–ê`);
        }
      });
      
      // Stream —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const streamTracks = state.stream.getTracks();
      this._log(`  üåä –í –ø–æ—Ç–æ–∫–µ —Ç—Ä–µ–∫–æ–≤: ${streamTracks.length}`);
      streamTracks.forEach((track, i) => {
        this._log(`    Stream —Ç—Ä–µ–∫ ${i}: ${track.kind}, enabled=${track.enabled}, readyState=${track.readyState}, muted=${track.muted}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º stats
      if (state.pc.connectionState === 'connected') {
        state.pc.getStats().then(stats => {
          let audioInbound = 0, audioOutbound = 0;
          stats.forEach(stat => {
            if (stat.type === 'inbound-rtp' && stat.mediaType === 'audio') {
              audioInbound++;
            } else if (stat.type === 'outbound-rtp' && stat.mediaType === 'audio') {
              audioOutbound++;
            }
          });
          this._log(`  üìà Stats - Inbound audio: ${audioInbound}, Outbound audio: ${audioOutbound}`);
        }).catch(e => {
          this._log(`  üìà Stats error: ${e}`);
        });
      }
    }
    
    this._log('=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
  }

  async handleSignal(msg, mediaBinder){
    if (msg?.fromUserId && this.userId && msg.fromUserId === this.userId) return;
    if (msg?.targetUserId && this.userId && msg.targetUserId !== this.userId) return;

    const peerId = msg.fromUserId;
    if (!peerId) return;

    // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∑–¥–µ—Å—å!
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
    if (!this.localStream) {
      this._log('–ö–†–ò–¢–ò–ß–ù–û: –ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–∞!');
      return;
    }
    
    const peer = await this._ensurePeer(peerId);
    const pc = peer.pc;

    if (mediaBinder && !peer.handlers){
      mediaBinder(peerId, { onTrack: () => {}, onLevel: () => {} });
    }

    if (msg.signalType === 'offer'){
      try {
        const desc = { type: 'offer', sdp: msg.sdp };
        await pc.setRemoteDescription(desc);
        peer.remoteSet = true;
        await this._flushQueuedCandidates(peerId);

        const answer = await pc.createAnswer({
          offerToReceiveAudio: true,
          offerToReceiveVideo: true,
          voiceActivityDetection: false  // –û—Ç–∫–ª—é—á–∞–µ–º VAD –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        });
        await pc.setLocalDescription(answer);
        sendSignal(this.ws, 'answer', { sdp: answer.sdp }, this.userId, peerId);
        this._log(`üì§ Answered offer from ${peerId.slice(0,8)}`);
      } catch(e) {
        this._log(`‚ùå Failed to handle offer from ${peerId.slice(0,8)}: ${e}`);
      }

    } else if (msg.signalType === 'answer'){
      if (pc.signalingState !== 'have-local-offer'){
        this._log(`Ignoring answer from ${peerId} - wrong state: ${pc.signalingState}`);
        return;
      }
      
      try {
        await pc.setRemoteDescription({ type: 'answer', sdp: msg.sdp });
        peer.remoteSet = true;
        await this._flushQueuedCandidates(peerId);
        this._log(`Processed answer from ${peerId}`);
      } catch(e) {
        this._log(`Failed to handle answer from ${peerId}: ${e}`);
      }

    } else if (msg.signalType === 'ice-candidate'){
      if (!peer.remoteSet) {
        peer.candidates.push(msg.candidate);
      } else {
        try { 
          await pc.addIceCandidate(msg.candidate); 
        } catch(e) { 
          this._log(`Failed to add ICE candidate from ${peerId}: ${e}`); 
        }
      }
    }
  }

  async _flushQueuedCandidates(peerId){
    const peer = this.peers.get(peerId);
    if (!peer?.pc) return;
    
    while (peer.candidates.length){
      const candidate = peer.candidates.shift();
      try { 
        await peer.pc.addIceCandidate(candidate); 
      } catch(e) { 
        this._log(`Failed to flush ICE candidate for ${peerId}: ${e}`); 
      }
    }
  }

  async startOffer(peerId){
    // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if (!this.localStream) {
      this._log('–ö–†–ò–¢–ò–ß–ù–û: –ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è startOffer!');
      return;
    }
    
    const state = await this._ensurePeer(peerId);
    
    if (!state.isInitiator) {
      this._log(`Not initiator for ${peerId.slice(0,8)}, skipping offer`);
      return;
    }
    
    if (state.negotiationInProgress) {
      this._log(`Negotiation already in progress for ${peerId.slice(0,8)}`);
      return;
    }
    
    if (state.pc.signalingState !== 'stable'){
      this._log(`Cannot start offer for ${peerId.slice(0,8)} - signaling state: ${state.pc.signalingState}`);
      return;
    }
    
    try {
      state.negotiationInProgress = true;
      await this._createAndSendOffer(peerId, state);
    } catch(e) {
      this._log(`Failed to start offer for ${peerId.slice(0,8)}: ${e}`);
    } finally {
      state.negotiationInProgress = false;
    }
  }

  toggleMic(){
    if (!this.localStream) {
      this._log('–ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞');
      return false;
    }
    const track = this.localStream.getAudioTracks()[0];
    if (!track) {
      this._log('–ù–µ—Ç –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è');
      return false;
    }
    track.enabled = !track.enabled;
    this._log(`–ú–∏–∫—Ä–æ—Ñ–æ–Ω ${track.enabled ? '–≤–∫–ª—é—á—ë–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
    return track.enabled;
  }

  async toggleCam(){
    if (!this.localStream) {
      this._log('–ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –∫–∞–º–µ—Ä—ã');
      return false;
    }
    
    let videoTrack = this.localStream.getVideoTracks()[0];
    
    if (!videoTrack) {
      // –ö–∞–º–µ—Ä–∞ –µ—â—ë –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫
      try {
        const videoStream = await navigator.mediaDevices.getUserMedia({
          video: this.preferred.camId ? { deviceId: { exact: this.preferred.camId } } : true,
          audio: false
        });
        
        const [newVideoTrack] = videoStream.getVideoTracks();
        if (newVideoTrack) {
          this.localStream.addTrack(newVideoTrack);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
          if (this.localVideo) {
            this.localVideo.srcObject = this.localStream;
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ç—Ä–µ–∫ –∫–æ –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º peer connections
          for (const [peerId, state] of this.peers) {
            try {
              const videoSender = state.pc.getSenders().find(s => s.track?.kind === 'video');
              if (videoSender) {
                await videoSender.replaceTrack(newVideoTrack);
              } else {
                state.pc.addTrack(newVideoTrack, this.localStream);
              }
            } catch(e) {
              this._log(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∞ –¥–ª—è ${peerId}: ${e}`);
            }
          }
          
          this._log('–ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞');
          return true;
        }
      } catch(e) {
        this._log(`–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã: ${e?.name||e}`);
        return false;
      }
    } else {
      // –ö–∞–º–µ—Ä–∞ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º
      videoTrack.enabled = !videoTrack.enabled;
      this._log(`–ö–∞–º–µ—Ä–∞ ${videoTrack.enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
      return videoTrack.enabled;
    }
    
    return false;
  }

  async close(){
    try { this.ws?.close(); } catch {}
    
    for (const [peerId, state] of this.peers){
      try { state.pc?.close(); } catch {}
      if (state.level?.raf) cancelAnimationFrame(state.level.raf);
      if (state.level?.ctx) {
        try { state.level.ctx.close(); } catch {}
      }
      clearTimeout(state.iceFailTimer);
    }
    this.peers.clear();
    
    if (this.localStream) {
      this.localStream.getTracks().forEach(track => track.stop());
    }
    this.localStream = null;
    this._log('WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã');
  }

  _setupPeerLevel(peerId, state){
    try {
      if (!window.AudioContext || !state.stream?.getAudioTracks().length) return;
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (state.level.ctx) {
        try { state.level.ctx.close(); } catch {}
      }
      if (state.level.raf) {
        cancelAnimationFrame(state.level.raf);
      }
      
      state.level.ctx = new AudioContext();
      const source = state.level.ctx.createMediaStreamSource(state.stream);
      state.level.analyser = state.level.ctx.createAnalyser();
      state.level.analyser.fftSize = 256;
      source.connect(state.level.analyser);
      
      const dataArray = new Uint8Array(state.level.analyser.frequencyBinCount);
      
      const updateLevel = () => {
        if (!state.level.analyser) return;
        
        state.level.analyser.getByteTimeDomainData(dataArray);
        let sum = 0;
        for (let i = 0; i < dataArray.length; i++) {
          const normalized = (dataArray[i] - 128) / 128;
          sum += normalized * normalized;
        }
        const rms = Math.sqrt(sum / dataArray.length);
        
        if (state.handlers?.onLevel) {
          state.handlers.onLevel(rms);
        }
        
        state.level.raf = requestAnimationFrame(updateLevel);
      };
      
      state.level.raf = requestAnimationFrame(updateLevel);
    } catch(e) {
      this._log(`–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è ${peerId}: ${e}`);
    }
  }
}

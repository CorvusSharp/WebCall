// webrtc.js ‚Äî –º—É–ª—å—Ç–∏–ø–∏—Ä WebRTC —Å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–π –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–æ–π –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
import { sendSignal } from "./signal.js";
import { getIceServers } from "./api.js";

/**
 * –û–ø—Ü–∏–∏:
 * - localVideo: HTMLVideoElement|null
 * - outputDeviceId?: string|null
 * - onLog?: (msg)=>void
 * - onPeerState?: (peerId, key, value)=>void
 */
export class WebRTCManager {
constructor(opts){
  this.localVideo = opts.localVideo || null;
  this.outputDeviceId = opts.outputDeviceId || null;
  this.onLog = opts.onLog || (()=>{});
  this.onPeerState = opts.onPeerState || (()=>{});

  this.ws = null;
  this.userId = null;
  this.localStream = null;
  this.preferred = { micId: undefined, camId: undefined };
  this.iceConfig = null;
  this.peers = new Map();

  this._offerLocks = new Map(); // <‚Äî –∞–Ω—Ç–∏-–¥—É–±–ª—å createOffer() –ø–æ –ø–∏—Ä—É
  this._videoSender = null; // RTCRtpSender –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ—Ç—Ä–µ–∫–æ–≤ (–∫–∞–º–µ—Ä–∞ + —ç–∫—Ä–∞–Ω)
  this._currentVideoKind = 'none'; // none | camera | screen | multi (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
  this._cameraTrack = null;
  this._screenTrack = null;
  this._cameraSender = null;
  this._screenSender = null;
  this._screenStream = null; // –æ—Ç–¥–µ–ª—å–Ω—ã–π stream –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π getDisplayMedia)
  this.videoConstraints = {
    camera: { width: { ideal: 1280 }, height: { ideal: 720 }, frameRate: { ideal: 24, max: 30 } },
    screen: { frameRate: 15 }
  };
  this.onVideoState = opts.onVideoState || (()=>{}); // callback(kind:'none'|'camera'|'screen', track)
  // Canvas –∫–æ–º–ø–æ–∑–∏—Ü–∏—è (–ª–æ–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–≤—å—é):
  this._compositeEnabled = false;
  this._compositeCanvas = null; // –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ (index.html)
  this._compositeRaf = null;
  // –ú–µ—Ç—Ä–∏–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ (fps/—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
  this._metricsTimer = null;
  this._metrics = { fps:0, width:0, height:0 };
}
  _log(m){ try{ this.onLog(m); }catch{} }
  getOutputDeviceId(){ return this.outputDeviceId; }
  setPreferredDevices({ mic, cam, spk }){
    if (mic) this.preferred.micId = mic;
    if (cam) this.preferred.camId = cam;
    if (spk) this.outputDeviceId = spk;
    for (const [,st] of this.peers){
      try { st.handlers?.onSinkChange?.(this.outputDeviceId); } catch {}
    }
  }

  async _getLocalMedia() {
    const baseAudio = {
      echoCancellation: true, noiseSuppression: true, autoGainControl: true,
      deviceId: this.preferred.micId ? { exact: this.preferred.micId } : undefined,
    };
    try {
      this._log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω...');
      const s = await navigator.mediaDevices.getUserMedia({ audio: baseAudio, video: false });
      this._log('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω–æ');
      return s;
    } catch (e) {
      this._log(`getUserMedia failed: ${e?.name || e}`);
      // Fallback: –ø—Ä–æ–±—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±–µ–∑ deviceId
      if (e?.name === 'OverconstrainedError' || e?.name === 'NotFoundError') {
        try {
          this._log('–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∞—É–¥–∏–æ –±–µ–∑ deviceId‚Ä¶');
          const s2 = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });
          this._log('–ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
          return s2;
        } catch (e2) {
          this._log(`–ü–æ–≤—Ç–æ—Ä–Ω—ã–π gUM –Ω–µ —É–¥–∞–ª—Å—è: ${e2?.name || e2}`);
        }
      }
      return null;
    }
  }


  async init(ws, userId, { micId, camId } = {}) {
    this.ws = ws;
    this.userId = userId;
    if (micId) this.preferred.micId = micId;
    if (camId) this.preferred.camId = camId;

    if (!this.iceConfig) {
      try {
        this.iceConfig = await getIceServers();
      } catch (e) {
        this._log(`ICE config error: ${e}`);
        this.iceConfig = { iceServers: [{ urls: "stun:stun.l.google.com:19302" }] };
      }
    }

    if (this.localStream) return;

    const stream = await this._getLocalMedia();
    this.localStream = stream;
    if (stream && this.localVideo) {
      this.localVideo.srcObject = stream;
    }
    this._log(`WebRTC –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ê—É–¥–∏–æ: ${stream && stream.getAudioTracks().length ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);

    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø—Ä–æ–±—Ä–æ—Å–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ-—Ç—Ä–µ–∫ –≤–æ –≤—Å–µ—Ö —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
    if (this.localStream) { await this.updateAllPeerTracks(); }
  }

  _isPolite(myId, peerId){
    // –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä ‚Äî —É –∫–æ–≥–æ id —Å—Ç—Ä–æ–∫–æ–π –º–µ–Ω—å—à–µ; ¬´–≤–µ–∂–ª–∏–≤—ã–π¬ª —Ç–æ—Ç, —É –∫–æ–≥–æ –±–æ–ª—å—à–µ
    return String(myId) > String(peerId);
  }


async _ensurePeer(peerId) {
  if (this.peers.has(peerId)) return this.peers.get(peerId);

  const pc = new RTCPeerConnection({
    ...this.iceConfig,
    bundlePolicy: "max-bundle",
    rtcpMuxPolicy: "require",
  });

  const state = {
    pc,
    stream: new MediaStream(),
    candidates: [],
    remoteSet: false,
    handlers: null,
    makingOffer: false,
    ignoreOffer: false,
    polite: this._isPolite(this.userId, peerId),
    iceFailTimer: null,
    // ‚ö†Ô∏è –ë–æ–ª—å—à–µ –ù–ï —Å–æ–∑–¥–∞—ë–º —Ç—É—Ç —Å–≤–æ–π audio transceiver. –î–∞–¥–∏–º –±—Ä–∞—É–∑–µ—Ä—É —Å–æ–∑–¥–∞—Ç—å
    // –µ–≥–æ –ø—Ä–∏ SRD(offer), –∞ –ø–æ—Ç–æ–º "–∞–ø–≥—Ä–µ–π–¥–∏–º" –∏–º–µ–Ω–Ω–æ –µ–≥–æ –≤ handleSignal().
    audioTransceiver: null,
  };

  pc.addEventListener("icecandidate", (e) => {
    if (e.candidate) {
      sendSignal(this.ws, "ice-candidate", { candidate: e.candidate }, this.userId, peerId);
      this._log(`üßä Sent ICE candidate to ${peerId.slice(0,8)}: ${e.candidate.candidate}`);
    }
  });

  pc.addEventListener("track", (e) => {
    this._log(`–ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫ –æ—Ç ${peerId.slice(0,8)}: ${e.track.kind} (enabled: ${e.track.enabled})`);
    if (e.track && !state.stream.getTracks().some(t => t.id === e.track.id)) {
      state.stream.addTrack(e.track);
    }
    e.track.addEventListener('mute', () => this._log(`(remote:${peerId.slice(0,8)}) ${e.track.kind} muted`));
    e.track.addEventListener('unmute', () => this._log(`(remote:${peerId.slice(0,8)}) ${e.track.kind} unmuted`));
    e.track.addEventListener('ended', () => this._log(`(remote:${peerId.slice(0,8)}) ${e.track.kind} ended`));

    if (state.handlers?.onTrack) {
      try { state.handlers.onTrack(state.stream); } catch {}
    }
    if (e.track?.kind === 'audio') this._setupPeerLevel(peerId, state);
  });

  pc.addEventListener("negotiationneeded", async () => {
    if (state.makingOffer) return;
    // –†–∞–Ω–µ–µ –æ—Ñ—Ñ–µ—Ä—ã —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ "impolite" —Å—Ç–æ—Ä–æ–Ω–æ–π. –≠—Ç–æ –ª–æ–º–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏–∏,
    // –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ—Ç—Ä–µ–∫ –¥–æ–±–∞–≤–ª—è–ª—Å—è —É polite —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—á–∞—Å—Ç–æ –º–æ–±–∏–ª—å–Ω—ã–π), –∏ peers
    // —Ç–∞–∫ –∏ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–ª–∏ –∫ m=video. –¢–µ–ø–µ—Ä—å –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –º–æ–≥—É—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å,
    // –Ω–æ –∑–∞—â–∏—â–∞–µ–º—Å—è –æ—Ç –∫–æ–ª–ª–∏–∑–∏–π —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é collision logic –≤ handleSignal().
    try {
      state.makingOffer = true;
      this._log(`‚öôÔ∏è negotiationneeded ‚Üí createOffer (polite=${state.polite}) for ${peerId.slice(0,8)}`);
      const offer = await pc.createOffer();
      await pc.setLocalDescription(offer);
      sendSignal(this.ws, 'offer', { sdp: offer.sdp }, this.userId, peerId);
      this._log(`üì§ Sent offer ‚Üí ${peerId.slice(0,8)} (negotiationneeded, polite=${state.polite})`);
    } catch (e) {
      this._log(`negotiationneeded(${peerId.slice(0,8)}): ${e?.name || e}`);
    } finally { state.makingOffer = false; }
  });

  pc.addEventListener("connectionstatechange", () => {
    const s = pc.connectionState;
    this.onPeerState(peerId, 'net', s);
    this._log(`PC(${peerId.slice(0,8)}) = ${s}`);
    if (s === 'failed') {
      this._iceRestart(peerId).catch(() => {});
    } else if (s === 'disconnected') {
      clearTimeout(state.iceFailTimer);
      state.iceFailTimer = setTimeout(() => {
        if (pc.connectionState === 'disconnected') this._iceRestart(peerId).catch(() => {});
      }, 2000);
    } else if (s === 'connected' || s === 'completed') {
      clearTimeout(state.iceFailTimer); state.iceFailTimer = null;
    }
  });

  pc.addEventListener("iceconnectionstatechange", () => {
    this._log(`ICE(${peerId.slice(0,8)}) = ${pc.iceConnectionState}`);
  });

  this.peers.set(peerId, state);
  return state;
}


  async _iceRestart(peerId){
    const st = this.peers.get(peerId);
    if (!st) return;
    this._log(`ICE-restart ‚Üí ${peerId.slice(0,8)}`);
    try{
      const offer = await st.pc.createOffer({ iceRestart: true });
      await st.pc.setLocalDescription(offer);
      sendSignal(this.ws, 'offer', { sdp: offer.sdp }, this.userId, peerId);
    }catch(e){ this._log(`ICE-restart(${peerId.slice(0,8)}): ${e?.name||e}`); }
  }

  bindPeerMedia(peerId, handlers){
    const st = this.peers.get(peerId);
    if (!st) { return; }
    // –û–±—ä–µ–¥–∏–Ω–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–Ω–∏—è
    st.handlers = Object.assign({}, st.handlers || {}, handlers || {});
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç—Ä–µ–∫–∏ ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ–±—Ä–æ—Å–∏–º –ø–æ—Ç–æ–∫
    if (st.stream && (st.stream.getAudioTracks().length || st.stream.getVideoTracks().length)){
      try { st.handlers?.onTrack?.(st.stream); } catch {}
      // –ò —Å—Ä–∞–∑—É –ø–æ–¥–Ω–∏–º–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è –¥–ª—è –∞—É–¥–∏–æ
      try { if (st.stream.getAudioTracks().length) this._setupPeerLevel(peerId, st); } catch {}
    }
  }
  getPeer(peerId){ return this.peers.get(peerId); }




async handleSignal(msg, mediaBinder) {
  if (msg?.fromUserId && this.userId && msg.fromUserId === this.userId) return;
  if (msg?.targetUserId && this.userId && msg.targetUserId !== this.userId) return;

  const peerId = msg.fromUserId;
  const peer = await this._ensurePeer(peerId);
  const pc = peer.pc;

  if (mediaBinder && !peer.handlers) {
    mediaBinder(peerId, { onTrack: ()=>{}, onLevel: ()=>{}, onSinkChange: ()=>{} });
  }

  if (msg.signalType === 'offer') {
    await this.init(this.ws, this.userId);
    const desc = { type: 'offer', sdp: msg.sdp };
    this._log(`üì• Received OFFER from ${peerId.slice(0,8)}:\n${msg.sdp}`);

    const offerCollision = peer.makingOffer || pc.signalingState !== "stable";
    peer.ignoreOffer = !peer.polite && offerCollision;
    if (peer.ignoreOffer) { this._log(`‚è≠Ô∏è Ignore offer from ${peerId.slice(0,8)} (impolite collision)`); return; }

    try {
      if (offerCollision) await pc.setLocalDescription({ type: 'rollback' });
      await pc.setRemoteDescription(desc);
      peer.remoteSet = true;
      await this._flushQueuedCandidates(peerId);

      // === –ö–õ–Æ–ß: –¥–æ createAnswer() –¥–µ–ª–∞–µ–º sendrecv + replaceTrack –ø–æ –ú–≠–ü–ü–ò–ù–ì–£ —Ç—Ä–∞–Ω—Å—Å–∏–≤–µ—Ä–∞ ===
      try {
        let at = this.localStream?.getAudioTracks?.()[0];
        if (!at) {
          const s = await this._getLocalMedia();
          if (s) { this.localStream = s; at = s.getAudioTracks()[0]; }
        }
        // –∏—â–µ–º –∞—É–¥–∏–æ-—Ç—Ä–∞–Ω—Å—Å–∏–≤–µ—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π m=audio –∏–∑ –æ—Ñ—Ñ–µ—Ä–∞
        let tx = pc.getTransceivers().find(t => (t.receiver?.track?.kind === 'audio') || t.mid === '0');
        if (!tx) {
          // –ø–æ—á—Ç–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∞—Ç—å—Å—è, –Ω–æ –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è
          tx = pc.addTransceiver('audio', { direction: 'sendrecv' });
        }
        tx.direction = 'sendrecv';
        if (at) await tx.sender.replaceTrack(at);
        peer.audioTransceiver = tx;
        this._log(`üîß (answer) ensured sendrecv + local track for ${peerId.slice(0,8)}`);
      } catch (e) {
        this._log(`ensure sendrecv before answer: ${e?.name||e}`);
      }
      // ========================================================

      const answer = await pc.createAnswer();
      await pc.setLocalDescription(answer);
      sendSignal(this.ws, 'answer', { sdp: answer.sdp }, this.userId, peerId);
      this._log(`üì§ Answered offer from ${peerId.slice(0,8)}\n${answer.sdp}`);

      if (this.localStream) { await this.updateAllPeerTracks(); }
    } catch (e) {
      this._log(`SRD(offer)[${peerId.slice(0,8)}]: ${e?.name||e}`);
    }

  } else if (msg.signalType === 'answer') {
    if (pc.signalingState !== 'have-local-offer') {
      this._log(`Ignore answer in ${pc.signalingState}`); return;
    }
    try {
      this._log(`üì• Received ANSWER from ${peerId.slice(0,8)}:\n${msg.sdp}`);
      await pc.setRemoteDescription({ type: 'answer', sdp: msg.sdp });
      peer.remoteSet = true;
      await this._flushQueuedCandidates(peerId);
      if (this.localStream) { await this.updateAllPeerTracks(); }
      this._log(`Processed answer from ${peerId.slice(0,8)}`);
    } catch (e) {
      this._log(`SRD(answer)[${peerId.slice(0,8)}]: ${e?.name||e}`);
    }

  } else if (msg.signalType === 'ice-candidate' || msg.signalType === 'ice_candidate') {
    this._log(`üßä Received ICE candidate from ${peerId.slice(0,8)}: ${msg.candidate ? msg.candidate.candidate : '(null)'}`);
    if (!peer.remoteSet) peer.candidates.push(msg.candidate);
    else {
      try { await pc.addIceCandidate(msg.candidate); }
      catch (e) { this._log(`addIce[${peerId.slice(0,8)}]: ${e?.name||e}`); }
    }
  }
}



  async _flushQueuedCandidates(peerId){
    const peer = this.peers.get(peerId);
    if (!peer?.pc) return;
    while (peer.candidates.length){
      const c = peer.candidates.shift();
      try { await peer.pc.addIceCandidate(c); }
      catch(e){ this._log(`flush ICE[${peerId.slice(0,8)}]: ${e?.name||e}`); }
    }
  }

async startOffer(peerId){
  await this.init(this.ws, this.userId);
  const st = await this._ensurePeer(peerId);
  const pc = st.pc;

  // –∞–Ω—Ç–∏-—Å–ø–∞–º: –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã –ø–æ –æ–¥–Ω–æ–º—É –ø–∏—Ä—É
  if (this._offerLocks.get(peerId)) {
    this._log(`startOffer(${peerId.slice(0,8)}): locked`);
    return;
  }

  // —Ç–æ–ª—å–∫–æ "–Ω–µ–≤–µ–∂–ª–∏–≤—ã–π" –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç
  if (st.polite) { this._log(`Not initiator for ${peerId.slice(0,8)}`); return; }
  if (pc.signalingState !== 'stable'){
    this._log(`Skip startOffer(${peerId.slice(0,8)}) in ${pc.signalingState}`); return;
  }

  try{
    this._offerLocks.set(peerId, true);
    st.makingOffer = true;

    // === –ö–õ–Æ–ß: –ø–µ—Ä–µ–¥ createOffer() –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ-—Ç—Ä–∞–Ω—Å—Å–∏–≤–µ—Ä –∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫ ===
    let at = this.localStream?.getAudioTracks?.()[0];
    if (!at) {
      const s = await this._getLocalMedia();
      if (s) { this.localStream = s; at = s.getAudioTracks()[0]; }
    }

    // –Ω–∞–π–¥—ë–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—É–¥–∏–æ-—Ç—Ä–∞–Ω—Å—Å–∏–≤–µ—Ä –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º
    let tx = pc.getTransceivers().find(t =>
      t.sender?.track?.kind === 'audio' || t.receiver?.track?.kind === 'audio'
    );
    if (!tx) {
      tx = pc.addTransceiver('audio', { direction: 'sendrecv' });
      this._log(`Added offer-side audio transceiver sendrecv for ${peerId.slice(0,8)}`);
    } else {
      tx.direction = 'sendrecv';
    }
    if (at) { await tx.sender.replaceTrack(at); }
    st.audioTransceiver = tx;
    // ============================================================================

    const offer = await pc.createOffer();
    await pc.setLocalDescription(offer);
    sendSignal(this.ws, 'offer', { sdp: offer.sdp }, this.userId, peerId);
    this._log(`üì§ Sent offer ‚Üí ${peerId.slice(0,8)} (startOffer)\n${offer.sdp}`);
  }catch(e){
    this._log(`startOffer(${peerId.slice(0,8)}): ${e?.name||e}`);
    // –º—è–≥–∫–∏–π –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ä–µ—Ç—Ä–∞–π —á–µ—Ä–µ–∑ 300–º—Å –ø—Ä–∏ OperationError/–∑–∞–º–∏–Ω–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    if (String(e?.name||'').includes('OperationError')) {
      setTimeout(()=>{ this._offerLocks.delete(peerId); this.startOffer(peerId).catch(()=>{}); }, 300);
    }
  }finally{
    st.makingOffer = false;
    this._offerLocks.delete(peerId);
  }
}


  async toggleMic(){
    if (this.localStream) {
      const tr = this.localStream.getAudioTracks()[0];
      if (!tr) { this._log('–ù–µ—Ç –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è'); return false; }
      tr.enabled = !tr.enabled;
      this._log(`–ú–∏–∫—Ä–æ—Ñ–æ–Ω ${tr.enabled ? '–≤–∫–ª—é—á—ë–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
      return tr.enabled;
    } else {
      this._log('–ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞, –ø—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å...');
      const stream = await this._getLocalMedia();
      if (stream) {
        this.localStream = stream;
        if (this.localVideo) this.localVideo.srcObject = stream;
        await this.updateAllPeerTracks(); // Add this function
        this._log('–ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á—ë–Ω (–ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω)');
        return true;
      } else {
        this._log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
        return false;
      }
    }
  }
  toggleCam(){
    if (!this.localStream) { this._log('–ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –∫–∞–º–µ—Ä—ã'); return false; }
    let tr = this.localStream.getVideoTracks()[0];
    if (!tr){
      navigator.mediaDevices.getUserMedia({
        video: this.preferred.camId ? { deviceId: { exact: this.preferred.camId } } : true,
        audio: false
      }).then(s=>{
        const [vt] = s.getVideoTracks();
        if (!vt) return;
        this.localStream.addTrack(vt);
        this._attachOrReplaceVideoSender(vt);
        if (this.localVideo) this.localVideo.srcObject = this.localStream;
        this._currentVideoKind = 'camera';
        this._log('–ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞');
      }).catch(e=> this._log(`Camera init: ${e?.name||e}`));
      return true;
    }
    tr.enabled = !tr.enabled;
    this._log(`–ö–∞–º–µ—Ä–∞ ${tr.enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
    return tr.enabled;
  }

  _attachOrReplaceVideoSender(track){
    try {
      for (const [pid,peer] of this.peers){
        // –î–ª—è –¥–≤—É—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ—Ç—Ä–µ–∫–æ–≤ –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –î–û 2-—Ö sender.
        const senders = peer.pc.getSenders().filter(s=> s.track && s.track.kind==='video');
        // –û–ø—Ä–µ–¥–µ–ª–∏–º —Ç–∏–ø —Ç—Ä–µ–∫–∞
        const type = track._wcType || (track.label.toLowerCase().includes('screen') ? 'screen' : 'camera');
        let targetSender = (type==='screen'? this._screenSender : this._cameraSender);
        if (targetSender && !senders.includes(targetSender)) targetSender = null; // —É—Å—Ç–∞—Ä–µ–ª

        if (!targetSender){
          // –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π sender (–±–µ–∑ —Ç—Ä–µ–∫–∞) –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º
            let free = peer.pc.getSenders().find(s=> !s.track && s.transport);
            if (free){
              free.replaceTrack(track).catch(()=>{});
              targetSender = free;
              this._log(`‚ûï reuse empty video sender ‚Üí ${pid.slice(0,8)} (${type}, id=${track.id})`);
            } else {
              targetSender = peer.pc.addTrack(track, this.localStream);
              this._log(`‚ûï add video track ‚Üí ${pid.slice(0,8)} (${type}, id=${track.id})`);
            }
        } else if (targetSender.track !== track){
          const oldId = targetSender.track?.id;
          targetSender.replaceTrack(track).then(()=>{
            this._log(`‚ôªÔ∏è replace ${type} track ‚Üí ${pid.slice(0,8)} (${oldId}‚Üí${track.id})`);
          }).catch(()=>{});
        } else {
          this._log(`‚ÜîÔ∏è ${type} track already set for ${pid.slice(0,8)} (id=${track.id})`);
        }

        if (type==='screen') this._screenSender = targetSender;
        else this._cameraSender = targetSender;
      }
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Ä–≤–æ–≥–æ sender –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
      const firstPeer = this.peers.values().next().value;
      if (firstPeer){
        this._videoSender = firstPeer.pc.getSenders().find(s=> s.track && s.track.kind==='video') || this._videoSender; // legacy
      }
    } catch {}
  }

  async startCamera(){
    if (this._cameraTrack && this._cameraTrack.readyState === 'live'){
      this._log('–ö–∞–º–µ—Ä–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞');
      return true;
    }
    try {
      const base = this.preferred.camId ? { deviceId: { exact: this.preferred.camId }, ...this.videoConstraints.camera } : this.videoConstraints.camera;
      const gum = await navigator.mediaDevices.getUserMedia({ video: base, audio: false });
      const track = gum.getVideoTracks()[0];
      if (!track) { this._log('–ù–µ—Ç video track –ø–æ—Å–ª–µ getUserMedia'); return false; }
      track._wcType = 'camera';
      if (!this.localStream){ this.localStream = await this._getLocalMedia() || new MediaStream(); }
      // –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä—É—é –∫–∞–º–µ—Ä—É –µ—Å–ª–∏ –±—ã–ª–∞
      if (this._cameraTrack){ try { this._cameraTrack.stop(); } catch{}; try { this.localStream.removeTrack(this._cameraTrack); } catch{} }
      this._cameraTrack = track;
      this.localStream.addTrack(track);
      this._attachOrReplaceVideoSender(track);
      this._updateLocalPreview();
  try { this.localVideo?.play?.().catch(()=>{}); } catch {}
      this._refreshVideoKind();
      track.onended = () => { this._log('–ö–∞–º–µ—Ä–∞ —Ç—Ä–µ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω'); if (this._cameraTrack === track) this.stopCamera(); };
      this._log(`–ö–∞–º–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ (track id=${track.id}, label="${track.label}")`);
      this.onVideoState('camera', track);

      // –ê–≤—Ç–æ-—Ç—Ä–∏–≥–≥–µ—Ä renegotiation –µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä (—Ä–µ–¥–∫–æ) –Ω–µ –≤—ã–¥–∞–ª negotiationneeded
      setTimeout(()=>{
        for (const [pid, st] of this.peers){
          const pc = st.pc;
          if (pc.signalingState === 'stable'){
            const hasVideoSender = pc.getSenders().some(s=> s.track && s.track.kind==='video');
            const transHasVideo = pc.getTransceivers().some(t=> t.sender?.track?.kind==='video');
            // –ï—Å–ª–∏ sender –µ—Å—Ç—å, –Ω–æ m=video –µ—â—ë –Ω–µ —É—à–ª–æ (–º–æ–∂–Ω–æ –∫–æ—Å–≤–µ–Ω–Ω–æ —Å—É–¥–∏—Ç—å –ø–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é currentDirection —Å send)
            const needForce = hasVideoSender && !pc.getTransceivers().some(t=> (t.sender?.track?.kind==='video' && /send/.test(t.currentDirection||'')));
            if (needForce){
              this._log(`‚ö†Ô∏è Force renegotiation (manual offer) for ${pid.slice(0,8)} ‚Äî negotiationneeded –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª`);
              st.pc.createOffer().then(of=>{
                return st.pc.setLocalDescription(of).then(()=>{
                  sendSignal(this.ws, 'offer', { sdp: of.sdp }, this.userId, pid);
                  this._log(`üì§ Sent offer (forced video) ‚Üí ${pid.slice(0,8)}`);
                });
              }).catch(e=> this._log(`forceOffer(${pid.slice(0,8)}): ${e?.name||e}`));
            }
          }
        }
      }, 500);
      return true;
    } catch(e){ this._log(`startCamera error: ${e?.name||e}`); return false; }
  }

  async startScreenShare(){
    if (this._screenTrack && this._screenTrack.readyState === 'live'){ this._log('Screen share —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω'); return true; }
    try {
      const ds = await navigator.mediaDevices.getDisplayMedia({ video: this.videoConstraints.screen, audio: false });
      const track = ds.getVideoTracks()[0];
      if (!track){ this._log('–ù–µ—Ç —Ç—Ä–µ–∫–∞ —ç–∫—Ä–∞–Ω–∞'); return false; }
      this._screenStream = ds;
      track._wcType = 'screen';
      if (!this.localStream){ this.localStream = await this._getLocalMedia() || new MediaStream(); }
      if (this._screenTrack){ try { this._screenTrack.stop(); } catch{}; try { this.localStream.removeTrack(this._screenTrack); } catch{} }
      this._screenTrack = track;
      this.localStream.addTrack(track);
      this._attachOrReplaceVideoSender(track);
      this._updateLocalPreview();
  try { this.localVideo?.play?.().catch(()=>{}); } catch {}
      track.onended = () => {
        this._log('Screen share –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        if (this._screenTrack === track) this.stopScreenShare();
      };
      this._log('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞');
      this._refreshVideoKind();
      this.onVideoState('screen', track);
      return true;
    } catch(e){ this._log(`startScreenShare error: ${e?.name||e}`); return false; }
  }

  stopCamera(){
    if (!this._cameraTrack) return;
    try { this._cameraTrack.stop(); } catch{}
    if (this.localStream){ try { this.localStream.removeTrack(this._cameraTrack); } catch{} }
    for (const [,peer] of this.peers){
      const sender = this._cameraSender && peer.pc.getSenders().includes(this._cameraSender) ? this._cameraSender : null;
      if (sender && sender.track){ sender.replaceTrack(null).catch(()=>{}); }
    }
    this._cameraTrack = null; this._cameraSender = null;
    this._updateLocalPreview();
    this._refreshVideoKind();
    this._log('–ö–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    this.onVideoState('camera', null);
  }

  stopScreenShare(){
    if (!this._screenTrack) return;
    try { this._screenTrack.stop(); } catch{}
    if (this.localStream){ try { this.localStream.removeTrack(this._screenTrack); } catch{} }
    for (const [,peer] of this.peers){
      const sender = this._screenSender && peer.pc.getSenders().includes(this._screenSender) ? this._screenSender : null;
      if (sender && sender.track){ sender.replaceTrack(null).catch(()=>{}); }
    }
    this._screenStream?.getTracks().forEach(t=>{ try { t.stop(); } catch{} });
    this._screenStream = null;
    this._screenTrack = null; this._screenSender = null;
    this._updateLocalPreview();
    this._refreshVideoKind();
    this._log('Screen share –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    this.onVideoState('screen', null);
  }

  stopVideo(){ // legacy: –≤—ã–∫–ª—é—á–∏—Ç—å –≤—Å—ë
    this.stopCamera();
    this.stopScreenShare();
    if (!this._cameraTrack && !this._screenTrack){
      this._log('–í—Å–µ –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      this.onVideoState('none', null);
    }
  }

  async toggleScreenShare(){
    if (this._screenTrack){ this._log('–û—Ç–∫–ª—é—á–∞–µ–º screen share'); this.stopScreenShare(); return false; }
    const ok = await this.startScreenShare();
    return ok;
  }

  async switchCamera(deviceId){
    try {
      this.preferred.camId = deviceId;
      if (this._currentVideoKind !== 'camera'){ this._log('switchCamera: –∫–∞–º–µ—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º prefer'); return false; }
      const constraints = { video: { deviceId: { exact: deviceId }, ...this.videoConstraints.camera }, audio: false };
      const gum = await navigator.mediaDevices.getUserMedia(constraints);
      const newTrack = gum.getVideoTracks()[0]; if (!newTrack){ this._log('switchCamera: –Ω–µ—Ç –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ—Ç—Ä–µ–∫–∞'); return false; }
      const oldTracks = this.localStream?.getVideoTracks() || [];
      if (!this.localStream){ this.localStream = await this._getLocalMedia() || new MediaStream(); }
      oldTracks.forEach(t=>{ try { t.stop(); } catch{}; try { this.localStream.removeTrack(t); } catch{} });
      this.localStream.addTrack(newTrack);
      this._attachOrReplaceVideoSender(newTrack);
      if (this.localVideo) this.localVideo.srcObject = this.localStream;
      this._log('switchCamera: –≤–∏–¥–µ–æ—Ç—Ä–µ–∫ –∑–∞–º–µ–Ω—ë–Ω');
      this.onVideoState('camera', newTrack);
      return true;
    } catch(e){ this._log(`switchCamera error: ${e?.name||e}`); return false; }
  }

  async toggleCameraStream(){
    if (this._cameraTrack){ this._log('–û—Ç–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É'); this.stopCamera(); return false; }
    const ok = await this.startCamera();
    return ok;
  }

  async switchScreenShareWindow(){
    if (!this._screenTrack){ this._log('switchScreenShareWindow: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ screen share'); return false; }
    try {
      const ds = await navigator.mediaDevices.getDisplayMedia({ video: this.videoConstraints.screen, audio: false });
      const newTrack = ds.getVideoTracks()[0]; if (!newTrack){ this._log('switchScreenShareWindow: –Ω–µ—Ç –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞'); return false; }
      newTrack._wcType = 'screen';
      const old = this._screenTrack;
      this._screenTrack = newTrack;
      if (this.localStream){
        try { if (old) { old.stop(); this.localStream.removeTrack(old); } } catch{}
        this.localStream.addTrack(newTrack);
      }
      this._attachOrReplaceVideoSender(newTrack);
      this._updateLocalPreview();
      this._log('switchScreenShareWindow: —Ç—Ä–µ–∫ –∑–∞–º–µ–Ω—ë–Ω');
      return true;
    } catch(e){ this._log(`switchScreenShareWindow error: ${e?.name||e}`); return false; }
  }


  async close(){
      try{ this.ws?.close(); }catch{}
      for (const [, st] of this.peers){
          try{ 
              // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ
              st.pc.onicecandidate = null;
              st.pc.close();
          }catch{}
          if (st.level?.raf) cancelAnimationFrame(st.level.raf);
          clearTimeout(st.iceFailTimer);
      }
      this.peers.clear();
      if (this.localStream) this.localStream.getTracks().forEach(t=>t.stop());
      this.localStream = null;
      this._cameraTrack = null; this._screenTrack = null;
      this._cameraSender = null; this._screenSender = null;
    try { this.disableComposite(); } catch {}
    this._stopMetricsLoop();
    this._log('WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã');
  }

  _updateLocalPreview(){
    if (!this.localVideo) return;
    if (!this.localStream){ this.localVideo.srcObject = null; return; }
    // –ï—Å–ª–∏ –µ—Å—Ç—å —ç–∫—Ä–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∫–∞–º–µ—Ä—É, –∏–Ω–∞—á–µ –æ—á–∏—â–∞–µ–º
    let showTrack = this._screenTrack || this._cameraTrack;
    if (!showTrack){
      // –û—á–∏—Å—Ç–∫–∞ –∫–∞–¥—Ä–∞ (—É–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π frame)
      this.localVideo.srcObject = null;
      try { this.localVideo.load(); } catch{}
      return;
    }
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ —Ç–æ–ª—å–∫–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç—Ä–µ–∫–æ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    const ms = new MediaStream([showTrack]);
    this.localVideo.srcObject = ms;
  }

  _refreshVideoKind(){
    const cam = !!this._cameraTrack && this._cameraTrack.readyState==='live';
    const scr = !!this._screenTrack && this._screenTrack.readyState==='live';
    if (cam && scr) this._currentVideoKind = 'multi';
    else if (scr) this._currentVideoKind = 'screen';
    else if (cam) this._currentVideoKind = 'camera';
    else this._currentVideoKind = 'none';
    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–∞–º–µ—Ä—ã –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —à–µ—Ä–∏–Ω–≥–µ —ç–∫—Ä–∞–Ω–∞
    this._adaptVideoQualities().catch(()=>{});
    if (this._currentVideoKind === 'none') this._stopMetricsLoop(); else this._ensureMetricsLoop();
  }

  async _adaptVideoQualities(){
    try {
      const camLive = this._cameraTrack && this._cameraTrack.readyState==='live';
      const scrLive = this._screenTrack && this._screenTrack.readyState==='live';
      if (!camLive) return;
      if (scrLive){
        // –ü–æ–Ω–∏–∂–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –∫–∞–º–µ—Ä—ã
        const target = { frameRate: 12, width: { ideal: 960 }, height: { ideal: 540 } };
        await this._cameraTrack.applyConstraints(target).catch(()=>{});
        this._log('–ê–¥–∞–ø—Ç–∞—Ü–∏—è: –∫–∞–º–µ—Ä–∞ —Å–Ω–∏–∂–µ–Ω–∞ (fps‚âà12 960x540) –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º screen share');
      } else {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        await this._cameraTrack.applyConstraints(this.videoConstraints.camera).catch(()=>{});
        this._log('–ê–¥–∞–ø—Ç–∞—Ü–∏—è: –∫–∞–º–µ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º');
      }
    } catch(e){ this._log('adaptVideoQualities: '+(e?.name||e)); }
  }

  // === Canvas Composition (—ç–∫—Ä–∞–Ω + –∫–∞–º–µ—Ä–∞ PiP) ===
  enableComposite(canvas){
    try {
      if (!canvas) return false;
      this._compositeCanvas = canvas;
      this._compositeEnabled = true;
      canvas.style.display = '';
      if (this.localVideo) this.localVideo.style.opacity = '0'; // —Å–∫—Ä—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –∑–≤—É–∫–∞ (–µ—Å–ª–∏ –±—ã –±—ã–ª)
      this._runCompositeLoop();
      this._log('Composite canvas enabled');
      return true;
    } catch(e){ this._log('enableComposite error: '+(e?.name||e)); return false; }
  }
  disableComposite(){
    this._compositeEnabled = false;
    if (this._compositeRaf) cancelAnimationFrame(this._compositeRaf); this._compositeRaf=null;
    if (this._compositeCanvas){ this._compositeCanvas.getContext('2d')?.clearRect(0,0,this._compositeCanvas.width,this._compositeCanvas.height); this._compositeCanvas.style.display='none'; }
    if (this.localVideo) this.localVideo.style.opacity = '';
    this._log('Composite canvas disabled');
  }
  toggleComposite(canvas){
    if (this._compositeEnabled) this.disableComposite(); else this.enableComposite(canvas||this._compositeCanvas);
  }
  _runCompositeLoop(){
    if (!this._compositeEnabled || !this._compositeCanvas){ return; }
    const ctx = this._compositeCanvas.getContext('2d');
    if (!ctx){ return; }
    const W = this._compositeCanvas.width; const H = this._compositeCanvas.height;
    ctx.fillStyle = '#000'; ctx.fillRect(0,0,W,H);
    // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π: —ç–∫—Ä–∞–Ω –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∫–∞–º–µ—Ä–∞
    const screenTrack = (this._screenTrack && this._screenTrack.readyState==='live') ? this._screenTrack : null;
    const camTrack = (this._cameraTrack && this._cameraTrack.readyState==='live') ? this._cameraTrack : null;
    const drawTrack = (track, dx,dy,dw,dh)=>{
      try {
        const el = track._wcOffscreenEl || (track._wcOffscreenEl = document.createElement('video'));
        if (!el.srcObject){ const ms = new MediaStream([track]); el.srcObject = ms; el.muted=true; el.playsInline=true; el.autoplay=true; el.play().catch(()=>{}); }
        if (el.readyState >= 2){ ctx.drawImage(el, dx,dy,dw,dh); }
      } catch {}
    };
    if (screenTrack){
      drawTrack(screenTrack, 0,0,W,H);
      if (camTrack){
        // PiP –∫–∞–º–µ—Ä–∞ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
        const pipW = Math.round(W*0.22); const pipH = Math.round(pipW* (9/16));
        drawTrack(camTrack, W-pipW-24, H-pipH-24, pipW, pipH);
        // –†–∞–º–∫–∞
        ctx.strokeStyle = 'rgba(255,255,255,0.8)'; ctx.lineWidth = 3; ctx.strokeRect(W-pipW-24+1.5, H-pipH-24+1.5, pipW-3, pipH-3);
      }
    } else if (camTrack){
      drawTrack(camTrack, 0,0,W,H);
    } else {
      // –ù–µ—Ç —Ç—Ä–µ–∫–æ–≤ ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
      this.disableComposite();
      return;
    }
    this._compositeRaf = requestAnimationFrame(()=> this._runCompositeLoop());
  }

  _ensureMetricsLoop(){
    if (this._metricsTimer) return;
    const el = document.getElementById('localVideoMetrics');
    const update = ()=>{
      try {
        const track = this._screenTrack || this._cameraTrack;
        if (!track || track.readyState!=='live'){ this._stopMetricsLoop(); return; }
        let st = {};
        try { st = track.getSettings ? track.getSettings() : {}; } catch {}
        this._metrics.width = st.width || this._metrics.width;
        this._metrics.height = st.height || this._metrics.height;
        this._metrics.fps = st.frameRate ? Math.round(st.frameRate) : this._metrics.fps;
        if (el){
          el.style.display='';
          el.textContent = `${this._currentVideoKind} ${this._metrics.width||'?'}x${this._metrics.height||'?'} @${this._metrics.fps||0}fps`;
        }
      } catch {}
    };
    this._metricsTimer = setInterval(update, 1000);
    update();
  }
  _stopMetricsLoop(){ if (this._metricsTimer){ clearInterval(this._metricsTimer); this._metricsTimer=null; const el=document.getElementById('localVideoMetrics'); if (el){ el.style.display='none'; el.textContent='‚Äî'; } } }

  async updateAllPeerTracks() {
      if (!this.localStream) return;
      const audioTrack = this.localStream.getAudioTracks()[0];
      if (!audioTrack) return;

      this._log('–û–±–Ω–æ–≤–ª—è—é —Ç—Ä–µ–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–∏—Ä–æ–≤...');
    for (const [peerId, peer] of this.peers) {
      const sender = (peer.audioTransceiver?.sender) || peer.pc.getSenders().find(s => s.track?.kind === 'audio');
      if (!sender) continue;
      try {
        await sender.replaceTrack(audioTrack);
        this._log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∞—É–¥–∏–æ-—Ç—Ä–µ–∫ –¥–ª—è ${peerId.slice(0,8)}`);
      } catch (e) {
        this._log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –¥–ª—è ${peerId.slice(0,8)}: ${e}`);
      }
    }
  }

  _setupPeerLevel(peerId, state){
    try{
      if (!window.AudioContext || !state.stream?.getAudioTracks().length) return;
      if (state.level?.raf) cancelAnimationFrame(state.level.raf);
      state.level = state.level || {};
      state.level.ctx = new AudioContext();
      const src = state.level.ctx.createMediaStreamSource(state.stream);
      state.level.analyser = state.level.ctx.createAnalyser();
      state.level.analyser.fftSize = 256;
      src.connect(state.level.analyser);
      const data = new Uint8Array(state.level.analyser.frequencyBinCount);
      const loop = ()=>{
        state.level.analyser.getByteTimeDomainData(data);
        let sum=0; for (let i=0;i<data.length;i++){ const v=(data[i]-128)/128; sum+=v*v; }
        const rms = Math.sqrt(sum/data.length);
        if (state.handlers?.onLevel) state.handlers.onLevel(rms);
        state.level.raf = requestAnimationFrame(loop);
      };
      state.level.raf = requestAnimationFrame(loop);
      this._log(`–ù–∞—Å—Ç—Ä–æ–µ–Ω –∞—É–¥–∏–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è ${peerId.slice(0,8)}`);
    } catch(e) {
      this._log(`level[${peerId.slice(0,8)}]: ${e?.name||e}`);
    }
  }

  // –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
  async diagnoseAudio(){
      this._log('=== üîä –ê–£–î–ò–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===');
      if (this.localStream){
          const ats = this.localStream.getAudioTracks();
          this._log(`üì± –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫: ${ats.length} –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤`);
          ats.forEach((t,i)=> this._log(`üé§ –¢—Ä–µ–∫ ${i}: enabled=${t.enabled}, readyState=${t.readyState}, muted=${t.muted}`));
      } else {
          this._log('‚ùå –ù–ï–¢ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞!');
      }
      this._log(`üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${this.peers.size}`);
      
      for (const [peerId, st] of this.peers){
          const pc = st.pc;
          this._log(`--- Peer ${peerId.slice(0,8)} ---`);
          this._log(`üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${pc.connectionState}`);
          this._log(`üßä ICE: ${pc.iceConnectionState}`);
          this._log(`üì° Signaling: ${pc.signalingState}`);
          
          // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
          try{
              const stats = await pc.getStats();
              let hasActiveConnection = false;
              
              stats.forEach(r=>{
                  if (r.type === 'transport' && r.selectedCandidatePairId) {
                      const candidatePair = stats.get(r.selectedCandidatePairId);
                      if (candidatePair && candidatePair.state === 'succeeded') {
                          hasActiveConnection = true;
                          this._log(`üåê –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${candidatePair.localCandidateId} ‚Üî ${candidatePair.remoteCandidateId}`);
                      }
                  }
                  if (r.type === 'inbound-rtp' && r.kind === 'audio') {
                      this._log(`üì• –í—Ö–æ–¥—è—â–∏–π –∞—É–¥–∏–æ: ${r.bytesReceived} bytes, ${r.packetsReceived} packets`);
                  }
                  if (r.type === 'outbound-rtp' && r.kind === 'audio') {
                      this._log(`üì§ –ò—Å—Ö–æ–¥—è—â–∏–π –∞—É–¥–∏–æ: ${r.bytesSent} bytes, ${r.packetsSent} packets`);
                  }
              });
              
              this._log(`‚úÖ –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${hasActiveConnection ? '–î–∞' : '–ù–µ—Ç'}`);
              
          } catch(e) {
              this._log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e}`);
          }
      }
      this._log('=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
  }

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–∏–¥–µ–æ/—Ç—Ä–∞–Ω—Å—Å–∏–≤–µ—Ä–æ–≤ –¥–ª—è —Å–ª—É—á–∞—è –∞—Å–∏–º–º–µ—Ç—Ä–∏–∏
  async diagnoseVideo(){
    this._log('=== üé• –í–ò–î–ï–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===');
    if (this.localStream){
      const vts = this.localStream.getVideoTracks();
      this._log(`üì± –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫: ${vts.length} –≤–∏–¥–µ–æ —Ç—Ä–µ–∫(–∞)`);
      vts.forEach((t,i)=> this._log(`üì∏ –¢—Ä–µ–∫ ${i}: id=${t.id}, label="${t.label}", state=${t.readyState}, enabled=${t.enabled}`));
    } else {
      this._log('‚ùå –ù–ï–¢ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (video)');
    }
    for (const [peerId, st] of this.peers){
      const pc = st.pc;
      this._log(`--- Peer ${peerId.slice(0,8)} video ---`);
      try {
        const trans = pc.getTransceivers();
        trans.filter(t=> (t.sender?.track?.kind==='video') || (t.receiver?.track?.kind==='video')).forEach((t,idx)=>{
          this._log(`üîÅ TX#${idx} mid=${t.mid} dir=${t.direction} cur=${t.currentDirection} senderTrack=${t.sender?.track?.id||'-'} recvTrack=${t.receiver?.track?.id||'-'}`);
        });
        const senders = pc.getSenders().filter(s=> s.track && s.track.kind==='video');
        senders.forEach(s=> this._log(`‚û°Ô∏è sender track=${s.track.id} rtcp=${s.transport?.state||'?'} params=${(s.getParameters().encodings||[]).length}enc`));
        const receivers = pc.getReceivers().filter(r=> r.track && r.track.kind==='video');
        receivers.forEach(r=> this._log(`‚¨ÖÔ∏è receiver track=${r.track.id} state=${r.track.readyState}`));
        if (st.stream){
          const remoteV = st.stream.getVideoTracks();
          this._log(`üì• remote stream video tracks=${remoteV.length}`);
          remoteV.forEach((t,i)=> this._log(`   [${i}] id=${t.id} ready=${t.readyState} muted=${t.muted}`));
        }
      } catch(e){ this._log(`diagnoseVideo error: ${e?.name||e}`); }
    }
    this._log('=== –ö–û–ù–ï–¶ –í–ò–î–ï–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
  }
}
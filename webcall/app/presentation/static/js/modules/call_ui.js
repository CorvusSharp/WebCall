import { els, showToast } from './core/dom.js';

// –ù–æ–≤—ã–π UI —Å–ª–æ–π –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤. –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –º–æ–¥–∞–ª–∫–∏, –±–∞–Ω–Ω–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
/** @typedef {import('./calls_signaling.js').UICallState} UICallState */

const PHASE_ICONS = Object.freeze({
  idle: 'üìû',
  dialing: '‚è≥',
  outgoing_ringing: 'üì§',
  incoming_ringing: 'üì•',
  connecting: 'üîÑ',
  active: '‚úÖ',
  ended: '‚ö†Ô∏è',
});

let _handlers = { accept: null, decline: null, cancel: null, hangup: null };
let _lastClick = 0;
let _lastPhase = 'idle';
let _shellPrepared = false;

function actionGuard(fn) {
  const now = Date.now();
  if (now - _lastClick < 250) return; // –ø—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
  _lastClick = now;
  try { fn(); } catch (e) { console.warn('[call-ui] action error', e); }
}

function prepareShell() {
  if (_shellPrepared) return;
  _shellPrepared = true;
  if (els.callContext) {
    els.callContext.classList.add('call-banner');
    els.callContext.setAttribute('aria-live', 'polite');
    els.callContext.textContent = '';
    els.callContext.style.display = 'none';
  }
}

function ensureModal(id, variant) {
  let modal = document.getElementById(id);
  if (modal && !modal.classList.contains('call-modal')) {
    try { modal.remove(); } catch {}
    modal = null;
  }
  if (modal) return modal;
  modal = document.createElement('div');
  modal.id = id;
  modal.className = `call-modal call-modal--${variant} is-hidden`;
  modal.setAttribute('role', 'dialog');
  modal.setAttribute('aria-modal', 'true');

  if (variant === 'incoming') {
    modal.innerHTML = `
      <div class="call-modal__body">
        <div class="call-modal__avatar call-modal__avatar--incoming"><span class="call-modal__avatar-icon">üìû</span></div>
        <h3 class="call-modal__title">–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫</h3>
        <p class="call-modal__name" id="incomingCallFrom"></p>
        <p class="call-modal__status" id="incomingCallStatus"></p>
        <div class="call-modal__actions">
          <button id="btnCallAccept" class="btn btn-success">–ü—Ä–∏–Ω—è—Ç—å</button>
          <button id="btnCallDecline" class="btn btn-ghost">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
        </div>
      </div>`;
  } else {
    modal.innerHTML = `
      <div class="call-modal__body">
        <div class="call-modal__avatar call-modal__avatar--outgoing"><span class="call-modal__avatar-icon">üì§</span></div>
        <h3 class="call-modal__title">–°–æ–µ–¥–∏–Ω—è–µ–º‚Ä¶</h3>
        <p class="call-modal__name" id="outgoingCallTo"></p>
        <p class="call-modal__status" id="outgoingCallStatus"></p>
        <div class="call-modal__actions call-modal__actions--single">
          <button id="btnOutgoingCancel" class="btn btn-secondary">–û—Ç–º–µ–Ω–∏—Ç—å</button>
        </div>
      </div>`;
  }

  document.body.appendChild(modal);
  bindModalButtons();
  return modal;
}

function showIncoming(name, statusText) {
  const modal = ensureModal('incomingCallModal', 'incoming');
  const from = modal.querySelector('#incomingCallFrom');
  const status = modal.querySelector('#incomingCallStatus');
  if (from) from.textContent = name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  if (status) status.textContent = statusText || '–ó–≤–æ–Ω–∏—Ç‚Ä¶';
  modal.classList.remove('is-hidden');
  modal.setAttribute('aria-hidden', 'false');
}

function hideIncoming() {
  const modal = document.getElementById('incomingCallModal');
  if (!modal) return;
  modal.classList.add('is-hidden');
  modal.setAttribute('aria-hidden', 'true');
}

function showOutgoing(peer, statusText) {
  const modal = ensureModal('outgoingCallModal', 'outgoing');
  const toEl = modal.querySelector('#outgoingCallTo');
  const status = modal.querySelector('#outgoingCallStatus');
  if (toEl) toEl.textContent = peer || '';
  if (status) status.textContent = statusText || '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ‚Ä¶';
  modal.classList.remove('is-hidden');
  modal.setAttribute('aria-hidden', 'false');
}

function hideOutgoing() {
  const modal = document.getElementById('outgoingCallModal');
  if (!modal) return;
  modal.classList.add('is-hidden');
  modal.setAttribute('aria-hidden', 'true');
}

function bindModalButtons() {
  const accept = document.getElementById('btnCallAccept');
  const decline = document.getElementById('btnCallDecline');
  const cancel = document.getElementById('btnOutgoingCancel');
  if (accept && !accept.__bound) {
    accept.__bound = true;
    accept.addEventListener('click', () => actionGuard(() => _handlers.accept && _handlers.accept()));
  }
  if (decline && !decline.__bound) {
    decline.__bound = true;
    decline.addEventListener('click', () => actionGuard(() => _handlers.decline && _handlers.decline()));
  }
  if (cancel && !cancel.__bound) {
    cancel.__bound = true;
    cancel.addEventListener('click', () => actionGuard(() => _handlers.cancel && _handlers.cancel()));
  }
}

function updateBanner(phase, text) {
  if (!els.callContext) return;
  if (!text) {
    els.callContext.textContent = '';
    els.callContext.style.display = 'none';
    els.callContext.removeAttribute('data-phase');
    return;
  }
  const icon = PHASE_ICONS[phase] || PHASE_ICONS.idle;
  els.callContext.innerHTML = `<span class="call-banner__icon">${icon}</span><span class="call-banner__text">${text}</span>`;
  els.callContext.dataset.phase = phase;
  els.callContext.style.display = '';
}

function render(state) {
  prepareShell();
  /** @type {UICallState} */
  const s = state || { phase: 'idle' };
  const peer = s.otherUsername || s.otherUserId || '';
  let text = '';
  switch (s.phase) {
    case 'idle':
      text = '';
      break;
    case 'dialing':
      text = peer ? `–°–æ–µ–¥–∏–Ω—è–µ–º—Å—è —Å ${peer}‚Ä¶` : '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ‚Ä¶';
      break;
    case 'outgoing_ringing':
      text = peer ? `–ó–≤–æ–Ω–∏–º ${peer}‚Ä¶` : '–ó–≤–æ–Ω–∏–º‚Ä¶';
      break;
    case 'incoming_ringing':
      text = peer ? `–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç ${peer}` : '–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫';
      break;
    case 'connecting':
      text = peer ? `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${peer}‚Ä¶` : '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ‚Ä¶';
      break;
    case 'active':
      text = peer ? `–í —Ä–∞–∑–≥–æ–≤–æ—Ä–µ —Å ${peer}` : '–ó–≤–æ–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω';
      break;
    case 'ended':
      text = formatEndedReason(s);
      break;
    default:
      text = s.phase;
  }
  updateBanner(s.phase, text);

  if (s.phase === 'incoming_ringing') {
    hideOutgoing();
    showIncoming(peer, '–ó–≤–æ–Ω–∏—Ç‚Ä¶');
  } else if (s.phase === 'dialing') {
    hideIncoming();
    showOutgoing(peer, '–°–æ–µ–¥–∏–Ω—è–µ–º‚Ä¶');
  } else if (s.phase === 'outgoing_ringing') {
    hideIncoming();
    showOutgoing(peer, '–û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç‚Ä¶');
  } else if (s.phase === 'connecting') {
    if (s.incoming) {
      hideOutgoing();
      showIncoming(peer, '–ü–æ–¥–∫–ª—é—á–∞–µ–º‚Ä¶');
    } else {
      hideIncoming();
      showOutgoing(peer, '–ü–æ–¥–∫–ª—é—á–∞–µ–º‚Ä¶');
    }
  } else {
    hideIncoming();
    hideOutgoing();
  }

  if (s.phase === 'ended' && _lastPhase !== 'ended') {
    const reasonText = formatEndedReason(s);
    showToast(reasonText, { type: 'info', timeoutMs: 3200 });
  } else if (s.phase === 'active' && _lastPhase !== 'active') {
    const successText = peer ? `–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${peer} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ` : '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
    showToast(successText, { type: 'success', timeoutMs: 2400 });
  }
  _lastPhase = s.phase;
}

function formatEndedReason(s) {
  const r = s.reason || s.finalReason || '';
  switch (r) {
    case 'declined':
      return '–ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω';
    case 'cancel':
      return '–ó–≤–æ–Ω–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω';
    case 'timeout':
      return '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è (—Ç–∞–π–º–∞—É—Ç)';
    case 'unavailable':
      return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    case 'hangup':
      return '–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–≤–æ–Ω–æ–∫';
    case 'leave':
      return '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –∑–≤–æ–Ω–æ–∫';
    case 'disconnect':
      return '–°–≤—è–∑—å –ø–æ—Ç–µ—Ä—è–Ω–∞';
    case 'failed':
      return '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ';
    default:
      return '–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω';
  }
}

export function updateCallUI(state) {
  try { render(state); } catch (e) { console.warn('[call-ui] render error', e); }
}

export function bindActions(onAccept, onDecline, onCancel, onHangup) {
  _handlers.accept = onAccept;
  _handlers.decline = onDecline;
  _handlers.cancel = onCancel;
  _handlers.hangup = onHangup;
  bindModalButtons();
}

export function clearCallUI() {
  updateCallUI({ phase: 'idle' });
}

export { hideIncoming, hideOutgoing };

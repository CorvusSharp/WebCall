// diagnostics.js ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –∏ —Ç—Ä–∞–Ω—Å–∏–≤–µ—Ä–æ–≤
export class DiagnosticsManager {
  constructor({ logger } = {}) {
    this._logger = logger || (()=>{});
    this._env = { getLocalStream: ()=>null, getPeers: ()=> new Map() };
  }
  bindEnvironment(env){
    this._env = Object.assign(this._env, env||{});
  }
  _log(m){ try { this._logger(m); } catch {} }

  async diagnoseAudio(){
    const localStream = this._env.getLocalStream();
    const peers = this._env.getPeers();
    this._log('=== üîä –ê–£–î–ò–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===');
    if (localStream){
      const ats = localStream.getAudioTracks();
      this._log(`üì± –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫: ${ats.length} –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤`);
      ats.forEach((t,i)=> this._log(`üé§ –¢—Ä–µ–∫ ${i}: enabled=${t.enabled}, readyState=${t.readyState}, muted=${t.muted}`));
    } else {
      this._log('‚ùå –ù–ï–¢ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞!');
    }
    this._log(`üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${peers.size}`);

    for (const [peerId, st] of peers){
      const pc = st.pc;
      this._log(`--- Peer ${peerId.slice(0,8)} ---`);
      this._log(`üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${pc.connectionState}`);
      this._log(`üßä ICE: ${pc.iceConnectionState}`);
      this._log(`üì° Signaling: ${pc.signalingState}`);
      try {
        const localSdp = pc.localDescription?.sdp || ''; const remoteSdp = pc.remoteDescription?.sdp || '';
        const mAudioLocal = (localSdp.match(/^m=audio /gm)||[]).length;
        const mAudioRemote = (remoteSdp.match(/^m=audio /gm)||[]).length;
        this._log(`üìù SDP m=audio local=${mAudioLocal} remote=${mAudioRemote}`);
      } catch {}
      try {
        pc.getTransceivers().filter(t=> t.receiver?.track?.kind==='audio' || t.sender?.track?.kind==='audio').forEach((t,idx)=>{
          this._log(`üîÅ TR#a${idx} mid=${t.mid} dir=${t.direction} cur=${t.currentDirection} hasSender=${!!t.sender?.track} hasRecv=${!!t.receiver?.track}`);
        });
      } catch {}
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      try {
        const stats = await pc.getStats();
        let hasActiveConnection = false;
        stats.forEach(r=>{
          if (r.type === 'transport' && r.selectedCandidatePairId) {
            const candidatePair = stats.get(r.selectedCandidatePairId);
            if (candidatePair && candidatePair.state === 'succeeded') {
              hasActiveConnection = true;
              this._log(`üåê –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${candidatePair.localCandidateId} ‚Üî ${candidatePair.remoteCandidateId}`);
            }
          }
          if (r.type === 'inbound-rtp' && r.kind === 'audio') {
            this._log(`üì• –í—Ö–æ–¥—è—â–∏–π –∞—É–¥–∏–æ: ${r.bytesReceived} bytes, ${r.packetsReceived} packets`);
          }
          if (r.type === 'outbound-rtp' && r.kind === 'audio') {
            this._log(`üì§ –ò—Å—Ö–æ–¥—è—â–∏–π –∞—É–¥–∏–æ: ${r.bytesSent} bytes, ${r.packetsSent} packets`);
          }
        });
        this._log(`‚úÖ –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${hasActiveConnection ? '–î–∞' : '–ù–µ—Ç'}`);
      } catch(e){ this._log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e}`); }
    }
    this._log('=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
  }

  async diagnoseVideo(){
    const localStream = this._env.getLocalStream();
    const peers = this._env.getPeers();
    this._log('=== üé• –í–ò–î–ï–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===');
    if (localStream){
      const vts = localStream.getVideoTracks();
      this._log(`üì± –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫: ${vts.length} –≤–∏–¥–µ–æ —Ç—Ä–µ–∫(–∞)`);
      vts.forEach((t,i)=> this._log(`üì∏ –¢—Ä–µ–∫ ${i}: id=${t.id}, label="${t.label}", state=${t.readyState}, enabled=${t.enabled}`));
    } else {
      this._log('‚ùå –ù–ï–¢ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (video)');
    }
    for (const [peerId, st] of peers){
      const pc = st.pc;
      this._log(`--- Peer ${peerId.slice(0,8)} video ---`);
      try {
        const trans = pc.getTransceivers();
        trans.filter(t=> (t.sender?.track?.kind==='video') || (t.receiver?.track?.kind==='video')).forEach((t,idx)=>{
          this._log(`üîÅ TX#${idx} mid=${t.mid} dir=${t.direction} cur=${t.currentDirection} senderTrack=${t.sender?.track?.id||'-'} recvTrack=${t.receiver?.track?.id||'-'}`);
        });
        const senders = pc.getSenders().filter(s=> s.track && s.track.kind==='video');
        senders.forEach(s=> this._log(`‚û°Ô∏è sender track=${s.track.id} rtcp=${s.transport?.state||'?'} params=${(s.getParameters().encodings||[]).length}enc`));
        const receivers = pc.getReceivers().filter(r=> r.track && r.track.kind==='video');
        receivers.forEach(r=> this._log(`‚¨ÖÔ∏è receiver track=${r.track.id} state=${r.track.readyState}`));
        if (st.stream){
          const remoteV = st.stream.getVideoTracks();
            this._log(`üì• remote stream video tracks=${remoteV.length}`);
            remoteV.forEach((t,i)=> this._log(`   [${i}] id=${t.id} ready=${t.readyState} muted=${t.muted}`));
        }
      } catch(e){ this._log(`diagnoseVideo error: ${e?.name||e}`); }
    }
    this._log('=== –ö–û–ù–ï–¶ –í–ò–î–ï–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
  }
}
